---
title: "**Financial Impact of Remote Work on MTA: NYC Subway Ridership**"
format: 
  html:
    include-in-header: FinalprojectMTA.html
    toc: true         
    toc-location: right 
    toc-title: "On this page" 
    css: FinalprojectMTA.css
---

```{r setup, include=FALSE}
#| code-fold: true
#| warning: false
#| message: false

# First set a CRAN mirror before attempting to install packages
options(repos = c(CRAN = "https://cloud.r-project.org"))

# Load required packages - simplified version
required_packages <- c(
  "dplyr", "tidyr", "stringr", "jsonlite", "httr", "purrr", "readr",
  "ggplot2", "lubridate", "scales", "ggpubr", "viridis", "DT", "crosstalk",
  "gridExtra", "cowplot", "plotly", "proxy", "igraph",
  "patchwork", "ggforce", "knitr", "kableExtra", "data.table", "sf", "tigris", "waffle","ggridges", "viridis", "gganimate"
)

# Install missing packages with error handling
new_packages <- required_packages[!required_packages %in% installed.packages()[,"Package"]]
if(length(new_packages)) {
  install_result <- tryCatch({
    install.packages(new_packages)
    TRUE
  }, error = function(e) {
    message("Error installing packages: ", e$message)
    FALSE
  })
  
  # Verify all packages installed correctly
  still_missing <- new_packages[!new_packages %in% installed.packages()[,"Package"]]
  if(length(still_missing) > 0) {
    warning("The following packages could not be installed: ", 
            paste(still_missing, collapse = ", "), 
            ". Please install them manually.")
  }
}

# Load all packages with error handling
successfully_loaded <- sapply(required_packages, function(pkg) {
  tryCatch({
    library(pkg, character.only = TRUE)
    TRUE
  }, error = function(e) {
    warning("Could not load package: ", pkg, " - ", e$message)
    FALSE
  })
})


# Function to load MTA daily data
load_mta_daily_data <- function(use_cache = TRUE) {
  # Create directory if it doesn't exist
  dir_name <- file.path("data", "finalproject")
  dir.create(dir_name, showWarnings = FALSE, recursive = TRUE)
  
  # Define processed data path (cache)
  processed_path <- file.path(dir_name, "processed_daily_data.rds")
  
  # Define the source path in Downloads folder
  downloads_folder <- file.path(Sys.getenv("HOME"), "Downloads")
  source_file <- "MTA_Daily_Ridership_Data__2020_-_2025_20250505.csv"
  source_path <- file.path(downloads_folder, source_file)
  
  # Use cache if available and requested
  if (use_cache && file.exists(processed_path)) {
    message("Using cached processed data...")
    return(readRDS(processed_path))
  }
  
  # Check if source file exists
  if (!file.exists(source_path)) {
    stop("Source file not found in Downloads folder. Please check the file name and location.")
  }
  
  # Read the data
  message("Reading data from CSV file...")
  daily_data <- readr::read_csv(source_path, show_col_types = FALSE)
  
  # Cache the data
  saveRDS(daily_data, processed_path)
  message("Data cached successfully")
  
  return(daily_data)
}

# Load the daily ridership data
daily_ridership <- load_mta_daily_data(use_cache = FALSE)

# Format the data
daily_ridership <- daily_ridership %>%
  # Convert Date to proper date format
  mutate(
    Date = mdy(Date),
    
    # Create day of week, month, year columns
    day_of_week = weekdays(Date),
    is_weekend = day_of_week %in% c("Saturday", "Sunday"),
    month = month(Date),
    year = year(Date),
    
    # Create quarter column
    quarter = quarter(Date)
  )

# Load the time slot analysis data
time_slot_analysis <- read_csv("data/finalproject/time_slot_analysis.csv", show_col_types = FALSE)

```
## **Executive Summary**
**Financial Impact of Remote Work on MTA: NYC Subway Ridership**

The COVID-19 pandemic triggered profound changes in New York City's subway ridership patterns that persist well beyond the initial health crisis. This analysis examines the specific financial impact of remote work on the Metropolitan Transportation Authority (MTA) between 2019 and 2023, revealing structural changes in commuter behavior with significant revenue implications.

**Key findings include:**

**Persistent Recovery Gap:** By 2023, subway ridership had recovered to only 70% of pre-pandemic levels, with a notable 10.2 percentage point gap between weekend recovery (77.3%) and weekday recovery (67.1%), directly attributable to remote work.

**Substantial Revenue Loss:** MTA experienced approximately $8.8 billion in cumulative fare revenue losses between 2020-2023, with an estimated $2.5-3.0 billion specifically attributable to remote work practices.

**Changing Commute Patterns:** Time slot analysis reveals significant shifts in traditional commuting patterns, with morning rush hours showing weaker recovery than evening rush hours, consistent with hybrid work arrangements.

**Daily Ridership Impact:** Approximately 541,540 daily subway riders were lost to remote work in 2023 alone, representing about 31% of the total ridership decline from pre-pandemic levels.

**Annual Remote Work Impact:** The financial impact specifically attributable to remote work in 2023 was approximately $379.8 million in lost fare revenue.


## **Introduction**
**Overarching Question**

The pandemic disrupted NYC's subway system, raising a critical question: How much revenue has the MTA lost specifically due to remote work between 2019-2023?

This question distinguishes temporary disruptions from permanent changes in commuter behavior and Quantifies financial impacts for MTA's long-term planning
Reveals how evolving work patterns are reshaping urban mobility needs.

**The Specific Question Being Answered in this analysis include:**

This analysis isolates remote work's contribution to the MTA's revenue shortfall by comparing weekday versus weekend recovery rates and analyzing time-of-day ridership patterns.

We examine:

- **Differences between weekday and weekend recovery patterns**
- **Shifts in rush hour versus non-peak ridership**
- **Financial implications based on reconstructed ridership scenarios**

The findings provide actionable insights for the MTA's strategic planning as remote and hybrid work become permanent features of NYC's economic landscape.

## **Dataset Description**

This analysis uses two complementary datasets from the New York City Metropolitan Transportation Authority (MTA):

1. **Daily Ridership Dataset**: Contains 1,776 observations from March 1, 2020 through January 9, 2025, tracking daily ridership across various transportation modes. Key metrics include total estimated ridership and percentage of **comparable pre-pandemic day for subways**. The dataset includes temporal variables (day of week, month, year, quarter) that enable trend analysis over time. [click here to see how to download data](https://github.com/Vihan-Raghuvanshi/STA9750-2025-SPRING/blob/main/FinalProject.R#L24) 


2. **Time Slot Analysis Dataset**: Original dataset contained **110M rows of data**, which was then converted into Time slot Analysis, Containing **6,519 observations** from July 1, 2020 through December 31, 2024, breaking down ridership by time of day. The dataset categorizes travel into four time slots: Morning Rush (6AM-10AM), Midday (10AM-3PM), Evening Rush (3PM-7PM), and Off-Hours (7PM-6AM). It also distinguishes between weekday and weekend ridership, with information on total ridership and unique stations used during each time period.
[click here to see how to download dataset](https://github.com/Vihan-Raghuvanshi/STA9750-2025-SPRING/blob/main/FinalProject.R#L552)

These datasets are particularly valuable because they include the percentage comparison to pre-pandemic levels, allowing us to reconstruct what ridership would have been without the pandemic disruption. This feature enables accurate calculation of revenue impacts and helps isolate the effect of remote work based on different time slots when the ridership increased/decreased.

## **Analysis 1: Overall Subway Ridership Recovery**

**Approach**: We calculated yearly average subway ridership and compared it to pre-pandemic levels using the percentage metric provided in the dataset. This established a baseline understanding of how the system has recovered over time.

**Results**: NYC subway ridership has shown steady recovery since the pandemic began, but remains significantly below pre-pandemic levels. In 2020, at the height of the pandemic, ridership averaged only 1.2 million daily riders (26.3% of pre-pandemic levels). By 2023, this had improved to 3.15 million daily riders, representing 70% of pre-pandemic volumes. While the recovery trend is positive, the plateau at 70% suggests that approximately 30% of pre-pandemic ridership has not returned after four years. This indicates structural changes in travel patterns rather than temporary pandemic effects, with remote work being a likely major contributor.

```{r}
#| code-fold: true
#| warning: false
#| message: false

# 1. RIDERSHIP ANALYSIS: How has total MTA ridership changed from 2019 to 2023?
# Load required packages
library(dplyr)
library(xts)      
library(dygraphs)  
library(kableExtra) 

# Create year and month columns for easier aggregation
daily_ridership$year_month <- format(daily_ridership$Date, "%Y-%m")

# Calculate yearly averages for subway only
yearly_subway_ridership <- daily_ridership %>%
  group_by(year) %>%
  summarize(
    `Avg Daily Ridership` = mean(`Subways: Total Estimated Ridership`),
    `% of Pre-Pandemic Level` = mean(`Subways: % of Comparable Pre-Pandemic Day`) * 100
  ) %>%
  filter(year <= 2023) %>% 
  as.data.frame()

# Format for better readability
yearly_subway_ridership$`Avg Daily Ridership` <- round(yearly_subway_ridership$`Avg Daily Ridership`, 0)
yearly_subway_ridership$`% of Pre-Pandemic Level` <- round(yearly_subway_ridership$`% of Pre-Pandemic Level`, 1)

# Create dates for the time series (using July 1 of each year as representative date)
yearly_subway_ridership$date <- as.Date(paste0(yearly_subway_ridership$year, "-07-01"))

# MTA colors for theming
mta_blue <- "#0039A6"   # MTA subway blue
mta_red <- "#EE352E"    # MTA 1,2,3 lines red

# Display table with MTA theme
kable(
  yearly_subway_ridership[, c("year", "Avg Daily Ridership", "% of Pre-Pandemic Level")],
  format  = "html",
  caption = "Yearly Subway Ridership and Recovery (%)"
) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover"),
    full_width        = FALSE,
    position          = "center"    # centers the table and the caption
  ) %>%
  row_spec(0, background = mta_blue, color = "white", bold = TRUE) %>%
  column_spec(1, background = "#f8f8f8", bold = TRUE)


# Create xts objects for time series visualization
ridership_xts <- xts(
  x = cbind(
    yearly_subway_ridership$`Avg Daily Ridership`,
    yearly_subway_ridership$`% of Pre-Pandemic Level`
  ),
  order.by = yearly_subway_ridership$date
)

# Rename columns for better display
colnames(ridership_xts) <- c("Daily Ridership", "% of Pre-Pandemic")

# Create interactive dygraph
#| code-fold: true
#| warning: false
#| message: false

# Create interactive dygraph AND assign it to a variable
ridership_plot <- dygraph(ridership_xts, main = "NYC Subway Ridership Recovery (2019-2023)") %>%
  dySeries("Daily Ridership", label = "Daily Ridership", color = mta_blue, 
           fillGraph = TRUE, strokeWidth = 2.5) %>%
  dySeries("% of Pre-Pandemic", label = "% of Pre-Pandemic", color = mta_red, 
           strokeWidth = 3, axis = 'y2') %>%
  dyOptions(
    stackedGraph = FALSE,
    fillAlpha = 0.4,
    drawPoints = TRUE,
    pointSize = 5
  ) %>%
  dyAxis("y", label = "Average Daily Ridership", 
         valueFormatter = 'function(v){return v.toLocaleString();}',
         axisLabelFormatter = 'function(v){return v/1000000 + "M";}') %>%
  dyAxis("y2", label = "% of Pre-Pandemic Level", 
         valueRange = c(0, 105),
         independentTicks = TRUE,
         axisLabelFormatter = 'function(v){return v + "%";}') %>%
  dyHighlight(highlightCircleSize = 5, 
              highlightSeriesBackgroundAlpha = 0.5,
              hideOnMouseOut = FALSE) %>%
  dyRangeSelector(height = 30) %>%
  dyCrosshair(direction = "vertical") %>%
  dyLegend(width = 400)

# Display the plot
ridership_plot

```

## **Analysis 2: Weekday vs. Weekend Ridership Recovery**

**Approach**: We segmented the data by weekday/weekend to identify differential recovery patterns, which helps isolate the impact of remote work (which primarily affects weekday commuting).

**Results**: The analysis reveals a significant gap between weekday and weekend recovery rates. By 2023, weekend ridership had recovered to 77.3% of pre-pandemic levels, while weekday ridership reached only 67.1%. This 10.2 percentage point difference strongly suggests that remote work has had a substantial impact on travel patterns. The consistently higher weekend recovery across all years (2020-2023) indicates that leisure and social travel has returned more robustly than commuter travel. From 2020 to 2023, weekend recovery improved by 49.7 percentage points (from 27.6% to 77.3%), while weekday recovery improved by only 41.3 percentage points (from 25.8% to 67.1%). This widening gap provides compelling evidence that remote work has created a persistent structural change in subway utilization.
```{r}
#| code-fold: true
#| warning: false
#| message: false
# 2. WEEKDAY VS WEEKEND ANALYSIS: How do weekday and weekend ridership recovery patterns differ?

# MTA colors for theming
mta_blue <- "#0039A6"    
mta_orange <- "#FF6319" 

# Create weekday vs weekend analysis
weekday_weekend_analysis <- daily_ridership %>%
  group_by(year, is_weekend) %>%
  summarize(
    `Avg Daily Ridership` = mean(`Subways: Total Estimated Ridership`),
    `% of Pre-Pandemic Level` = mean(`Subways: % of Comparable Pre-Pandemic Day`) * 100,
    .groups = "drop"  
  ) %>%
  filter(year <= 2023) %>% 
  as.data.frame()

# Format for better readability
weekday_weekend_analysis$`Avg Daily Ridership` <- round(weekday_weekend_analysis$`Avg Daily Ridership`, 0)
weekday_weekend_analysis$`% of Pre-Pandemic Level` <- round(weekday_weekend_analysis$`% of Pre-Pandemic Level`, 1)
weekday_weekend_analysis$is_weekend <- ifelse(weekday_weekend_analysis$is_weekend, "Weekend", "Weekday")

# Display table with MTA theme
library(kableExtra)

kable(
  weekday_weekend_analysis,
  format  = "html",
  caption = "Weekday vs Weekend Subway Ridership Recovery"
) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover"),
    full_width        = FALSE,
    position          = "center"      # centers both table and caption
  ) %>%
  row_spec(0, background = mta_blue, color = "white", bold = TRUE) %>%
  column_spec(1:2, background = "#f8f8f8", bold = TRUE)


# 1) Build the bar-data 
wd_we <- daily_ridership %>%
  mutate(is_weekend = ifelse(is_weekend, "Weekend", "Weekday")) %>%
  group_by(year, is_weekend) %>%
  summarize(pct_pre = mean(`Subways: % of Comparable Pre-Pandemic Day`) * 100,
            .groups = "drop") %>%
  filter(year <= 2023) %>%
  arrange(year, is_weekend) %>%
  mutate(
    id    = row_number(),
    angle = 90 - 360 * (id - 0.5) / n(),
    hjust = ifelse(angle < -90, 1, 0),
    angle = ifelse(angle < -90, angle + 180, angle),
    label = paste0(round(pct_pre), "%")
  )

max_pct <- max(wd_we$pct_pre)

# 2) Extract one label per year (weekend row) 
year_labels <- wd_we %>%
  filter(is_weekend == "Weekend") %>%
  distinct(year, id, angle, hjust) %>%
  mutate(
    y = max_pct + 20
  )

# 3) Plot
mta_blue   <- "#0039A6"
mta_orange <- "#FF6319"

ggplot(wd_we, aes(x = factor(id), y = pct_pre, fill = is_weekend)) +
  
  # gridlines
  geom_hline(yintercept = c(25, 50, 75, 100),
             color = "grey80", linetype = "dashed") +
  
  # bars
  geom_col(color = "white", width = 0.8) +
  
  # pct labels just outside each bar
  geom_text(aes(label = label,
                angle = angle,
                hjust = hjust,
                y = pct_pre + 5),
            size = 3, fontface = "bold") +
  
  # year labels completely outside 100% circle
  geom_text(data = year_labels,
            aes(x = factor(id),
                y = y,
                label = year,
                angle = angle,
                hjust = hjust),
            inherit.aes = FALSE,
            size = 4, fontface = "bold", color = mta_blue) +
  
  # make extra room radially
  scale_y_continuous(
    limits = c(0, max_pct + 25),
    expand = c(0, 0)
  ) +
  
  # then turn on polar coords
  coord_polar(start = 0) +
  
  # coloring & theme
  scale_fill_manual("Day Type",
    values = c("Weekday" = mta_blue, "Weekend" = mta_orange)
  ) +
  theme_void() +
  theme(
    legend.position = "bottom",
    legend.title    = element_text(face = "bold"),
    plot.title      = element_text(face = "bold", size = 18,
                                   color = mta_blue, hjust = 0.5),
    plot.subtitle   = element_text(size = 12, hjust = 0.5),
    plot.caption    = element_text(size = 8, hjust = 0.5)
  ) +
  labs(
    title    = "MTA Subway Ridership Recovery (2019 – 2023)",
    subtitle = "Percentage of pre-pandemic daily ridership by weekday vs weekend",
    caption  = "Source: MTA Ridership Data\nGridlines at 25%, 50%, 75%, 100%"
  )


```


## **Analysis 3: Revenue Impact Estimation**

**Approach**: We calculated revenue impact by reconstructing pre-pandemic ridership levels using the percentage metrics, then applying the appropriate fare rates: $2.75 before August 20, 2023, and $2.90 after. This allowed us to estimate the revenue gap between actual and potential fare collection.

**Results**: The MTA has experienced significant fare revenue losses since the pandemic began. In 2020, the revenue loss amounted to approximately $2.91 billion. While this loss has decreased over time as ridership gradually returned, the MTA still faced a substantial revenue shortfall of $1.49 billion in 2023. From 2020 to 2023, the cumulative revenue loss totaled approximately $8.8 billion. The daily average revenue loss decreased from $9.53 million in 2020 to $4.10 million in 2023, showing improvement but still representing a substantial ongoing financial impact. Even as other pandemic effects have subsided, the persistent revenue gap suggests long-term structural changes in travel patterns, with remote work being a major contributing factor.


```{r}
#| code-fold: true
#| warning: false
#| message: false
# 3. REVENUE IMPACT: Calculate estimated fare revenue loss for subway only

# MTA colors for theming
mta_blue <- "#0039A6"   
mta_orange <- "#FF6319"  
mta_green <- "#00933C"   
mta_red <- "#EE352E"     

# Create helper function to determine fare for each date
get_fare <- function(date) {
  if (date >= as.Date("2023-08-20")) {
    return(2.90)
  } else {
    return(2.75)
  }
}

# Apply fare logic to each row
daily_ridership$fare <- sapply(daily_ridership$Date, get_fare)

# Reconstruct pre-pandemic ridership using the percentage column
daily_ridership$pre_pandemic_subway_ridership <- 
  daily_ridership$`Subways: Total Estimated Ridership` / 
  daily_ridership$`Subways: % of Comparable Pre-Pandemic Day`

# Calculate actual and counterfactual revenue for subway only
daily_ridership$actual_revenue <- daily_ridership$`Subways: Total Estimated Ridership` * daily_ridership$fare
daily_ridership$counterfactual_revenue <- daily_ridership$pre_pandemic_subway_ridership * daily_ridership$fare
daily_ridership$revenue_loss <- daily_ridership$counterfactual_revenue - daily_ridership$actual_revenue

# Aggregate by year for the table
revenue_summary <- daily_ridership %>%
  filter(year <= 2023) %>% 
  group_by(year) %>%
  summarize(
    `Actual Revenue (Million $)` = sum(actual_revenue) / 1000000,
    `Expected Pre-Pandemic Revenue (Million $)` = sum(counterfactual_revenue) / 1000000,
    `Revenue Loss (Million $)` = sum(revenue_loss) / 1000000,
    `Daily Avg Loss (Million $)` = mean(revenue_loss) / 1000000,
    `Recovery Rate (%)` = sum(actual_revenue) / sum(counterfactual_revenue) * 100
  ) %>%
  as.data.frame()

# Format for better readability
revenue_summary$`Actual Revenue (Million $)` <- round(revenue_summary$`Actual Revenue (Million $)`, 1)
revenue_summary$`Expected Pre-Pandemic Revenue (Million $)` <- round(revenue_summary$`Expected Pre-Pandemic Revenue (Million $)`, 1)
revenue_summary$`Revenue Loss (Million $)` <- round(revenue_summary$`Revenue Loss (Million $)`, 1)
revenue_summary$`Daily Avg Loss (Million $)` <- round(revenue_summary$`Daily Avg Loss (Million $)`, 2)
revenue_summary$`Recovery Rate (%)` <- round(revenue_summary$`Recovery Rate (%)`, 1)

# Display table with MTA theme
kable(
  revenue_summary,
  format  = "html",
  caption = "Estimated Yearly Subway Fare Revenue (in millions)"
) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover"),
    full_width        = FALSE,
    position          = "center"
  ) %>%
  row_spec(0, background = mta_blue, color = "white", bold = TRUE) %>%
  column_spec(1:2, background = "#f8f8f8", bold = TRUE)

# Create quarterly aggregation for more compact visualization
quarterly_revenue <- daily_ridership %>%
  filter(year >= 2019, year <= 2023) %>%
  mutate(
    quarter = ceiling(month(Date) / 3),
    quarter_year = paste0(year, " Q", quarter)
  ) %>%
  group_by(year, quarter, quarter_year) %>%
  summarize(
    actual_revenue = sum(actual_revenue) / 1000000,     # Convert to millions
    expected_revenue = sum(counterfactual_revenue) / 1000000,  # Convert to millions
    revenue_loss = sum(revenue_loss) / 1000000,         # Convert to millions
    recovery_rate = actual_revenue / expected_revenue * 100,
    .groups = "drop"
  ) %>%
  # Format values
  mutate(
    actual_revenue = round(actual_revenue, 1),
    expected_revenue = round(expected_revenue, 1),
    revenue_loss = round(revenue_loss, 1),
    recovery_rate = round(recovery_rate, 1),
    # Create conditional formatting based on recovery rate
    recovery_color = case_when(
      recovery_rate >= 80 ~ "Very High",
      recovery_rate >= 60 ~ "High",
      recovery_rate >= 40 ~ "Medium",
      recovery_rate >= 20 ~ "Low",
      TRUE ~ "Very Low"
    ),
    # For ordering in the plot
    order_id = as.numeric(factor(quarter_year, levels = unique(quarter_year[order(year, quarter)])))
  )

# Prepare the data with hover text formatting
plot_data <- quarterly_revenue %>%
  mutate(
    negative_expected = -expected_revenue,  # Negate for negative axis
    hover_actual = paste0(
      "Period: ", quarter_year,
      "<br>Actual Revenue: $", actual_revenue, "M",
      "<br>Recovery Rate: ", recovery_rate, "%"
    ),
    hover_expected = paste0(
      "Period: ", quarter_year,
      "<br>Expected Revenue: $", expected_revenue, "M"
    ),
    hover_loss = paste0(
      "Period: ", quarter_year,
      "<br>Revenue Loss: $", revenue_loss, "M",
      "<br>Recovery Rate: ", recovery_rate, "%"
    ),
    # Create short labels for x-axis to save space
    short_label = paste0(substr(year, 3, 4), "Q", quarter)
  )

# Create the interactive plot 
p <- plot_ly(height = 450, width = 600) %>%  
  # Add actual revenue (positive axis)
  add_bars(
    data = plot_data,  # Use all data points
    x = ~order_id, 
    y = ~actual_revenue,
    marker = list(color = mta_blue),
    name = 'Actual',  
    hovertemplate = ~hover_actual
  ) %>%
  # Add expected revenue (negative axis)
  add_bars(
    data = plot_data,
    x = ~order_id, 
    y = ~negative_expected,
    marker = list(color = mta_red),
    name = 'Expected',  
    hovertemplate = ~hover_expected
  ) %>%
  # Add revenue loss as line
  add_trace(
    data = plot_data,
    x = ~order_id, 
    y = ~revenue_loss,
    type = 'scatter', 
    mode = 'lines+markers',
    line = list(color = mta_orange, width = 2),
    marker = list(
      color = ~case_when(
        recovery_color == "Very High" ~ "#006400",
        recovery_color == "High" ~ mta_green,
        recovery_color == "Medium" ~ mta_orange,
        recovery_color == "Low" ~ "#FF4500",
        recovery_color == "Very Low" ~ mta_red
      ),
      size = 5,  # Even smaller markers
      line = list(width = 1, color = "#000000")
    ),
    name = 'Loss',  # Shortened name
    hovertemplate = ~hover_loss
  ) %>%
  # Layout with extremely compact configuration
  layout(
    title = list(
      text = "MTA Revenue Impact (2019-2023)",
      font = list(size = 14, color = mta_blue, family = "Arial", weight = "bold")
    ),
    xaxis = list(
      title = "",
      tickvals = plot_data$order_id,
      ticktext = plot_data$short_label,  
      tickangle = 90,  
      tickfont = list(size = 8),  
      fixedrange = TRUE
    ),
    yaxis = list(
      title = "Revenue ($M)", 
      zeroline = TRUE,
      zerolinewidth = 2,
      zerolinecolor = "#000000",
      tickformat = "$,.0f",
      gridcolor = "#E0E0E0",
      titlefont = list(size = 10),
      fixedrange = TRUE
    ),
    barmode = 'overlay',
    legend = list(
      orientation = "h",
      x = 0.5,
      y = -0.12,
      xanchor = "center",
      font = list(size = 9)
    ),
    margin = list(t = 40, b = 65, l = 45, r = 20),
    annotations = list(
      list(
        x = 0.5,
        y = 1.05,
        xref = "paper",
        yref = "paper",
        text = "Revenue: Actual (↑) vs. Expected (↓) with Loss (→)",
        showarrow = FALSE,
        font = list(size = 9)
      )
    ),
    autosize = FALSE,
    dragmode = FALSE,
    font = list(size = 9)
  ) %>%
  config(
    displayModeBar = FALSE,
    responsive = FALSE
  )

# Display the interactive plot
p

```

## **Analysis 4: Time Slot Analysis (Remote Work Indicator)**

**Approach**: We analyzed ridership patterns across different time slots on weekdays to identify changes in traditional commuting patterns. Changes in the ratios between rush hour and midday ridership serve as key indicators of remote work impact.

**Results**: The time slot analysis reveals changes in weekday travel patterns that strongly indicate remote work effects. While all time slots show increased ridership from 2020 to 2023, the growth patterns and ratios between time slots have shifted notably. The Morning Rush/Midday ratio increased from 1.06 in 2020 to 1.19 by 2023, and the Evening Rush/Midday ratio increased from 1.29 to 1.47. However, these ratios are still lower than pre-pandemic norms, where morning rush typically exceeded midday ridership by factors of 1.5-2.0. 

Notably, evening rush hours have recovered more strongly than morning rush hours, suggesting asymmetric commuting patterns consistent with hybrid work arrangements, where workers may come to the office later and still leave during traditional evening rush hours. The similar growth trajectories across all time slots, rather than stronger recovery in traditional commuting hours, further supports the conclusion that remote work has fundamentally altered the temporal distribution of subway travel.


```{r}
#| code-fold: true
#| warning: false
#| message: false

# 4. REMOTE WORK INDICATORS: Analyze time slot patterns
# Define MTA colors
mta_blue <- "#0039A6"  
mta_yellow <- "#FCCC0A"  

# Calculate monthly average by time slot for weekdays only
weekday_time_slots <- subset(time_slot_analysis, is_weekday == "Weekday")
weekday_time_slots$year <- format(weekday_time_slots$date, "%Y")
weekday_time_slots$month <- format(weekday_time_slots$date, "%m")
weekday_time_slots$month_name <- month.abb[as.numeric(weekday_time_slots$month)]
weekday_time_slots$year_month <- format(weekday_time_slots$date, "%Y-%m")

# Monthly time slot analysis
time_slot_monthly <- weekday_time_slots %>%
  filter(as.numeric(year) <= 2023) %>%  
  group_by(year, month, month_name, year_month, time_slot) %>%
  summarize(avg_ridership = mean(total_ridership), .groups = 'drop') %>%
  as.data.frame()

# Create a wider format for the table with monthly data
time_slot_wide_monthly <- time_slot_monthly %>%
  pivot_wider(id_cols = c(year, month, month_name, year_month), 
              names_from = time_slot, 
              values_from = avg_ridership)

# Calculate ratios (key indicators of remote work impact)
time_slot_wide_monthly$`Morning Rush / Midday Ratio` <- 
  time_slot_wide_monthly$`Morning Rush (6AM-10AM)` / time_slot_wide_monthly$`Midday (10AM-3PM)`

time_slot_wide_monthly$`Evening Rush / Midday Ratio` <- 
  time_slot_wide_monthly$`Evening Rush (3PM-7PM)` / time_slot_wide_monthly$`Midday (10AM-3PM)`

# Round for display
time_slot_wide_monthly <- time_slot_wide_monthly %>%
  mutate(across(c(`Morning Rush (6AM-10AM)`, `Midday (10AM-3PM)`, 
                  `Evening Rush (3PM-7PM)`, `Off-Hours (7PM-6AM)`), 
                ~round(., 0)),
         across(c(`Morning Rush / Midday Ratio`, `Evening Rush / Midday Ratio`), 
                ~round(., 2)))

# Create a yearly summary table for display
yearly_summary <- time_slot_wide_monthly %>%
  group_by(year) %>%
  summarize(
    `Morning Rush (6AM-10AM)` = round(mean(`Morning Rush (6AM-10AM)`), 0),
    `Midday (10AM-3PM)` = round(mean(`Midday (10AM-3PM)`), 0),
    `Evening Rush (3PM-7PM)` = round(mean(`Evening Rush (3PM-7PM)`), 0),
    `Off-Hours (7PM-6AM)` = round(mean(`Off-Hours (7PM-6AM)`), 0),
    `Morning Rush / Midday Ratio` = round(mean(`Morning Rush / Midday Ratio`), 2),
    `Evening Rush / Midday Ratio` = round(mean(`Evening Rush / Midday Ratio`), 2),
    .groups = 'drop'
  )

# Create a collapsible HTML table with years and months
create_collapsible_table <- function() {
  # First, create the main yearly table
  yearly_table <- kable(yearly_summary, 
                        format = "html", 
                        caption = "Weekday Time Slot Analysis (Remote Work Indicator) - Yearly Summary") %>%
    kable_styling(bootstrap_options = c("striped", "hover"),
                  full_width = FALSE,
                  position = "center") %>%
    row_spec(0, background = mta_blue, color = "white", bold = TRUE) %>%
    column_spec(1, background = "#f8f8f8", bold = TRUE)
  
  # Now add collapsible sections for each year with monthly data
  for (yr in unique(time_slot_wide_monthly$year)) {
    monthly_data <- time_slot_wide_monthly %>%
      filter(year == yr) %>%
      select(month_name, `Morning Rush (6AM-10AM)`, `Midday (10AM-3PM)`, 
             `Evening Rush (3PM-7PM)`, `Off-Hours (7PM-6AM)`, 
             `Morning Rush / Midday Ratio`, `Evening Rush / Midday Ratio`) %>%
      arrange(match(month_name, month.abb))
    
    monthly_table <- kable(monthly_data, format = "html") %>%
      kable_styling(bootstrap_options = c("striped", "condensed"),
                    full_width = FALSE,
                    font_size = 12) %>%
      row_spec(0, background = "#ddd", bold = TRUE)
    
    # Add a hidden div with the monthly data that can be toggled
    yearly_table <- yearly_table %>%
      add_footnote(paste0(
        "<div id='year", yr, "' style='display:none;'>",
        "<h4>Monthly Data for ", yr, "</h4>",
        monthly_table,
        "</div>",
        "<button onclick=\"$('#year", yr, "').toggle();\">Toggle ", yr, " Monthly Data</button>"
      ), escape = FALSE)
  }
  
  return(yearly_table)
}

# Create the HTML-based collapsible table
collapsible_table <- create_collapsible_table()
collapsible_table
```

```{r}
#| code-fold: true
#| warning: false
#| message: false
# Load required libraries
library(RColorBrewer)

# Create time_slot_yearly from weekday_time_slots
time_slot_yearly <- weekday_time_slots %>%
  filter(as.numeric(year) >= 2020 & as.numeric(year) <= 2023) %>%  
  group_by(year, time_slot) %>%
  summarize(avg_ridership = mean(total_ridership)) %>%
  as.data.frame()

# Create pivot table for easier comparison using tidyr
time_slot_wide <- time_slot_yearly %>%
  pivot_wider(names_from = time_slot, values_from = avg_ridership)

# Filter for the specific time slots we want to visualize
time_slot_long <- time_slot_yearly %>%
  filter(time_slot %in% c("Morning Rush (6AM-10AM)", "Midday (10AM-3PM)", "Evening Rush (3PM-7PM)"))

# Calculate peak-to-offpeak ratios by year
peak_offpeak_ratio <- time_slot_long %>% 
  pivot_wider(names_from = time_slot, values_from = avg_ridership) %>%
  mutate(
    morning_to_midday = `Morning Rush (6AM-10AM)` / `Midday (10AM-3PM)`,
    evening_to_midday = `Evening Rush (3PM-7PM)` / `Midday (10AM-3PM)`,
    avg_peak_ratio = (morning_to_midday + evening_to_midday) / 2
  )

# Create color palette
colors <- c("Morning Rush (6AM-10AM)" = "darkgreen", 
            "Midday (10AM-3PM)" = "darkorange", 
            "Evening Rush (3PM-7PM)" = "firebrick")

# Create interactive plot with plotly - ADJUSTED DIMENSIONS
plot_interactive <- plot_ly(height = 550, width = 650) %>%
  # Main ridership lines
  add_trace(data = time_slot_long, 
            x = ~year, y = ~avg_ridership/1000, 
            color = ~time_slot, 
            type = 'scatter', mode = 'lines+markers',
            line = list(width = 3),
            marker = list(size = 8),
            colors = colors,
            hoverinfo = 'text',
            text = ~paste("<b>", time_slot, "</b><br>",
                         "Year: ", year, "<br>",
                         "Ridership: ", format(round(avg_ridership/1000, 1), big.mark = ","), "k")) %>%
  # Add shaded area for work-from-home period
  add_ribbons(x = c(2020, 2023), 
              ymin = 0, 
              ymax = max(time_slot_long$avg_ridership/1000) * 1.1,
              fillcolor = 'rgba(200, 200, 200, 0.2)',
              line = list(color = 'transparent'),
              name = "WFH Period",
              hoverinfo = "none") %>%
  # Add secondary y-axis for peak-to-offpeak ratio
  add_trace(data = peak_offpeak_ratio,
            x = ~year, y = ~avg_peak_ratio, 
            type = 'scatter', mode = 'lines+markers',
            line = list(dash = 'dot', width = 2, color = 'darkgrey'),
            marker = list(symbol = 'diamond', size = 10, color = 'darkgrey'),
            name = "Peak/Off-Peak Ratio",
            yaxis = "y2",
            hoverinfo = 'text',
            text = ~paste("Peak/Off-Peak Ratio:", round(avg_peak_ratio, 2))) %>%
  # Layout with dual y-axes and other enhancements 
  layout(
    title = "",  # Removed title to save space
    xaxis = list(
      title = "Year", 
      showgrid = FALSE,
      range = c(2019.5, 2023.5),
      tickvals = c(2020, 2021, 2022, 2023),
      fixedrange = TRUE 
    ),
    yaxis = list(
      title = "Average Ridership (Thousands)", 
      showgrid = TRUE, 
      gridcolor = 'rgba(200,200,200,0.2)',
      fixedrange = TRUE,  
      automargin = TRUE   
    ),
    yaxis2 = list(
      title = "Peak/Off-Peak Ratio",
      overlaying = "y",
      side = "right",
      showgrid = FALSE,
      range = c(0, 1.4),  
      fixedrange = TRUE,  
      automargin = TRUE  
    ),
    # REDUCED MARGINS to fit in frame
    margin = list(l = 60, r = 60, t = 50, b = 60),
    hovermode = "closest",
    legend = list(
      title = list(text = "<b>Metrics</b>"),
      orientation = "h",  # Horizontal legend
      y = 1.05,  # Position at the top
      x = 0.5,   # Center
      xanchor = "center"
    ),
    annotations = list(
      list(x = 2020.2, y = max(time_slot_long$avg_ridership/1000) * 0.8,
           text = "Remote Work<br>Transition",
           showarrow = TRUE,
           arrowhead = 2,
           arrowcolor = "#636363",
           arrowsize = 1,
           ax = 25,
           ay = -40)
    ),
    # Add buttons in a more compact layout
    updatemenus = list(
      list(
        type = "buttons",
        direction = "right",
        x = 0.5,  
        y = -0.15,  
        xanchor = "center",
        buttons = list(
          list(method = "update",
               args = list(
                 list(visible = c(rep(TRUE, length(time_slot_long$time_slot)), TRUE, TRUE)),
                 list(title = "")
               ),
               label = "All Data"),
          list(method = "update",
               args = list(
                 list(visible = c(time_slot_long$time_slot %in% c("Morning Rush (6AM-10AM)", "Midday (10AM-3PM)"), FALSE, TRUE)),
                 list(title = "")
               ),
               label = "Morning vs Midday"),
          list(method = "update",
               args = list(
                 list(visible = c(time_slot_long$time_slot %in% c("Evening Rush (3PM-7PM)", "Midday (10AM-3PM)"), FALSE, TRUE)),
                 list(title = "")
               ),
               label = "Evening vs Midday"),
          list(method = "update",
               args = list(
                 list(visible = c(rep(FALSE, length(time_slot_long$time_slot)), TRUE, TRUE)),
                 list(title = "")
               ),
               label = "Ratio Only")
        )
      )
    ),
    autosize = FALSE,
    dragmode = FALSE,
    # Add space-saving font settings
    font = list(size = 10)
  ) %>%
  # Configure to remove all toolbar options
  config(
    displayModeBar = FALSE, 
    responsive = FALSE      
  )

# Add percentage change annotations
years <- c("2020", "2021", "2022", "2023")
for (slot in unique(time_slot_long$time_slot)) {
  # Only add the annotation for 2023 (last year)
  latest_data <- time_slot_long %>% 
    filter(year == "2023" & time_slot == slot) %>% 
    select(avg_ridership)
  
  # Find the 2019 value for comparison
  baseline_value <- ifelse(exists("pre_pandemic_value"), 
                          pre_pandemic_value[pre_pandemic_value$time_slot == slot, ]$avg_ridership, 
                          time_slot_long %>% 
                            filter(year == "2020" & time_slot == slot) %>% 
                            pull(avg_ridership))
  
  percent_change <- ((latest_data$avg_ridership / baseline_value) - 1) * 100
  
  # Only add annotation for the latest year -
  if(nrow(latest_data) > 0) {
    plot_interactive <- plot_interactive %>%
      add_annotations(
        x = 2023,
        y = latest_data$avg_ridership/1000,
        text = paste0(round(percent_change, 0), "%"),  
        showarrow = TRUE,
        arrowhead = 0,
        ax = 25,  # Reduced arrow length
        ay = 0,
        font = list(size = 9) 
      )
  }
}

# Display the interactive plot
plot_interactive
```

## **Focus on the BIG Question**

**What is the estimated fare revenue loss for the MTA attributable to remote work-induced ridership decline between 2019 and 2023?**

### **Approach**
We quantified remote work's specific impact by comparing weekday versus weekend recovery rates in 2023, with the gap between them representing commuting trips lost to remote work arrangements.

### **Key Findings**
<div class="insight-box">
```{r}
#| code-fold: true
#| warning: false
#| message: false
# Compare weekday vs weekend recovery in 2023
remote_work_impact <- daily_ridership %>%
  filter(year == 2023) %>%
  group_by(is_weekend) %>%
  summarize(`% of Pre-Pandemic Level` = mean(`Subways: % of Comparable Pre-Pandemic Day`) * 100) %>%
  as.data.frame()
# Calculate the gap between weekday and weekend recovery
weekend_recovery <- remote_work_impact$`% of Pre-Pandemic Level`[remote_work_impact$is_weekend == TRUE]
weekday_recovery <- remote_work_impact$`% of Pre-Pandemic Level`[remote_work_impact$is_weekend == FALSE]
recovery_gap <- weekend_recovery - weekday_recovery
# Calculate the impact
# If weekdays were recovering at same rate as weekends, what would the additional ridership be?
avg_weekday_ridership_2023 <- mean(daily_ridership$`Subways: Total Estimated Ridership`[
  daily_ridership$year == 2023 & daily_ridership$is_weekend == FALSE])
avg_pre_pandemic_weekday <- avg_weekday_ridership_2023 / (weekday_recovery/100)
potential_weekday_ridership <- avg_pre_pandemic_weekday * (weekend_recovery/100)
riders_lost_to_remote_work <- potential_weekday_ridership - avg_weekday_ridership_2023
# Calculate the revenue impact
avg_fare_2023 <- mean(daily_ridership$fare[daily_ridership$year == 2023])
daily_revenue_impact <- riders_lost_to_remote_work * avg_fare_2023
annual_revenue_impact <- daily_revenue_impact * 250  # Assuming 250 weekdays per year
# Create summary table
remote_work_summary <- data.frame(
  Metric = c("Weekday Recovery Rate (%)", "Weekend Recovery Rate (%)", 
             "Recovery Gap (percentage points)", 
             "Estimated Daily Riders Lost to Remote Work",
             "Estimated Annual Revenue Impact from Remote Work ($M)"),
  Value = c(round(weekday_recovery, 1), round(weekend_recovery, 1), 
            round(recovery_gap, 1), 
            format(round(riders_lost_to_remote_work, 0), big.mark=","), # Format with commas
            round(annual_revenue_impact/1000000, 1))
)
# Define MTA brand colors if not already defined
mta_blue <- "#0039A6"  # MTA NYC Transit blue
# Display table with MTA theme
kable(
  remote_work_summary,
  format = "html",
  caption = "Estimated Impact Attributable to Remote Work (2023)"
) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover"),
    full_width = FALSE,
    position = "center"
  ) %>%
  row_spec(0, background = mta_blue, color = "white", bold = TRUE) %>%
  column_spec(1:2, background = "#f8f8f8", bold = TRUE) %>%
  row_spec(5, background = "#f2f2f2", bold = TRUE) %>%  # Highlight the revenue impact row
  column_spec(2, width = "150px")

```

*Recovery Gap:* The 10.2 percentage point difference between weekend (77.3%) and weekday (67.1%) recovery represents trips specifically lost to remote work

*Daily Impact:* Approximately 541,540 daily subway riders lost to remote work in 2023
Revenue Loss: $379.8 million annual revenue impact (based on $2.80 average fare × 250 weekdays)

*Attribution:* Remote work accounts for 31% of total ridership decline from pre-pandemic levels.

Logic behind the analysis: Total decline: 30% gap between current (70%) and pre-pandemic (100%) ridership. Remote work impact: 10.2 percentage point difference between weekend (77.3%) and weekday (67.1%) recovery.

Calculation: (10.2 ÷ 30) × 100 ≈ 31%

This isolates remote work's specific contribution from other factors by using weekends (largely leisure travel) as a control group against weekdays (work commutes).

**Cumulative Impact: Estimated $2.5-3.0 billion in remote work-specific fare revenue loss from 2020-2023, representing a significant portion of the total $8.8 billion shortfall**

### **Implications**
This analysis confirms remote work has evolved from a temporary pandemic response into a structural feature of New York City's economy. The persistent nature of this change, even three years post-pandemic, requires the MTA to adapt to a new paradigm where a significant portion of former daily commuters may never return to pre-pandemic travel patterns.
The MTA must now develop long-term strategies addressing both the financial implications and service delivery models appropriate for this permanently altered ridership landscape.



