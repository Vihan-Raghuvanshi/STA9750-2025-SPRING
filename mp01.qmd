---
title: "Commission to Analyze Taxpayer Spending (CATS) - Policies Review"
format: 
  html:
    toc: true         
    toc-location: right 
    toc-title: "On this page" 
---

```{r setup, include=FALSE}
#| code-fold: true
#| warning: false
#| message: false

# Load required packages
if(!require("httr2")) install.packages("httr2")
if(!require("jsonlite")) install.packages("jsonlite")
if(!require("dplyr")) install.packages("dplyr")
if(!require("readr")) install.packages("readr")
if(!require("stringr")) install.packages("stringr")
if(!require("ggplot2")) install.packages("ggplot2")
if(!require("scales")) install.packages("scales")
if(!require("knitr")) install.packages("knitr")
if(!require("kableExtra")) install.packages("kableExtra")
if(!require("lubridate")) install.packages("lubridate")

library(httr2)
library(jsonlite)
library(dplyr)
library(readr)
library(stringr)
library(ggplot2)
library(scales)
library(knitr)
library(kableExtra)
library(lubridate)

knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)

import_nyc_payroll <- function() {
  if(!file.exists("data/mp01/nyc_payroll_export.csv")){
    dir.create("data/mp01", showWarnings=FALSE, recursive=TRUE)
    
    ENDPOINT <- "https://data.cityofnewyork.us/resource/k397-673e.json"
    
    BATCH_SIZE <- 50000
    OFFSET     <- 0
    END_OF_EXPORT <- FALSE
    ALL_DATA <- list()
    
    while(!END_OF_EXPORT){
      cat("Requesting items", OFFSET, "to", BATCH_SIZE + OFFSET, "\n")
      
      req <- request(ENDPOINT) |>
        req_url_query(`$limit`  = BATCH_SIZE, 
                      `$offset` = OFFSET)
      
      resp <- req_perform(req)
      
      batch_data <- fromJSON(resp_body_string(resp))
      
      ALL_DATA <- c(ALL_DATA, list(batch_data))
      
      if(NROW(batch_data) != BATCH_SIZE){
        END_OF_EXPORT <- TRUE
        cat("End of Data Export Reached\n")
      } else {
        OFFSET <- OFFSET + BATCH_SIZE
      }
    }
    
    ALL_DATA <- bind_rows(ALL_DATA)
    cat("Data export complete:", NROW(ALL_DATA), "rows and", NCOL(ALL_DATA), "columns.")
    write_csv(ALL_DATA, "data/mp01/nyc_payroll_export.csv")
    return(ALL_DATA)
  } else {
    return(read_csv("data/mp01/nyc_payroll_export.csv"))
  }
}

# process data
nyc_payroll <- import_nyc_payroll()

# Clean and standardize the data
nyc_clean <- nyc_payroll %>%
  mutate(across(c("agency_name", "last_name", "first_name",
                "work_location_borough", "title_description",
                "leave_status_as_of_june_30"),
              str_to_title)) %>%
  # Creating column for total compensation
  mutate(
    total_compensation = case_when(
      # High-ranking officials with fixed salary
      pay_basis == "per Annum" ~ base_salary,
      
      # Hourly employees: regular pay + 1.5x for OT
      pay_basis == "per Hour" ~ base_salary * (regular_hours + 1.5 * ot_hours),
      
      # Day-rate employees: convert total hours to days (7.5 hours/day)
      pay_basis == "Per Day" ~ base_salary * ((regular_hours + ot_hours) / 7.5),
      
      # Fallback for unexpected pay types
      TRUE ~ NA_real_
    )
  ) %>%
  # Create standardized column names for consistency
  rename(
    Agency = agency_name,
    Position = title_description,
    Fiscal_Year = fiscal_year,
    Total_Salary = total_compensation
  )
```

# **Executive Summary**  

This report analyzes New York City's payroll data (2014–2024) to identify inefficiencies in taxpayer-funded compensation and proposes three actionable reforms. By addressing salary disparities, overtime costs, and managerial overstaffing, these policies could yield **$98.5 million in cumulative savings over 10 years** while promoting equitable resource allocation.  

The analysis leverages 6.2 million payroll records across 169 agencies and 1979 positions to identify actionable opportunities. Each policy recommendation is backed by rigorous data analysis and considers both potential savings and implementation risks.

## Key Policy Recommendations & Findings 

### Policy I: Capping Non-Mayoral Salaries  
- **Excess Pay Identified**: $2.65 million paid to 76 employees in roles exceeding mayoral compensation
- **Savings Mechanism**: Cap salaries for non-critical roles at mayoral levels  
- **Risk Mitigation**: Exempt specialized positions (actuaries, investment directors) to retain talent
- **Implementation**: Adopt phased caps (2–3 years) and benchmark salaries to market rates  

### Policy II: Reducing Overtime via Strategic Hiring  
- **Top Opportunity**: Sanitation ($1M/year), Correction ($967K/year), and Building ($938K/year) agencies
- **Savings Potential**: $75 million over 10 years by hiring 3–5 FTEs/year to replace 3,000+ overtime hours
- **Key Targets**: Prioritize roles like Sanitation Mechanics and Correction Legal Coordinators

### Policy III: Optimizing Manager-to-Staff Ratios  
- **Inefficiency**: Managerial ratios exceed 1:15 in multiple agencies including Education and Health
- **Savings**: $20.48 million/year by streamlining excess leadership roles
- **Recommendation**: Reinvest savings into frontline services and track turnover post-implementation

# **Introduction**  

New York City's taxpayer-funded payroll expenditures surged by **56.9%** between **Fiscal Years 2014 and 2024**, growing from $21.8 billion to $34.2 billion. This trend, revealed by the [Citywide Payroll Data](https://data.cityofnewyork.us/City-Government/Citywide-Payroll-Data-Fiscal-Year-/k397-673e) (NYC OpenData), highlights systemic inefficiencies in compensation practices that demand urgent reform. At the request of the Commission to Analyze Taxpayer Spending (CATS), this analysis evaluates opportunities for fiscal responsibility and equitable resource allocation.

## Context & Scope  

The dataset, updated through June 2024, includes granular details on:  
- *Compensation*: Base salaries, overtime pay, total earnings, and pay basis (hourly, annual, etc.)
- *Roles*: Job titles, agency affiliations, and work locations

Three critical inefficiencies drive this analysis:  

1. **Salary Disparities**: Senior officials earn *2.4× the median salary* of rank-and-file employees—a gap exceeding both public-sector norms and mayoral compensation thresholds
2. **Overtime Overuse**: Several agencies allocate *20% of total hours* to overtime, incurring avoidable 1.5× wage premiums
3. **Inefficient Management Ratios**: Multiple agencies employ managers at ratios below 1:15 staff-to-supervisor, inflating administrative costs without operational justification

## Objectives  

1. Quantify excess spending in senior compensation, overtime, and managerial staffing
2. Model the fiscal impact of three policy reforms:  
   - Capping non-critical salaries at mayoral levels
   - Replacing high overtime hours with strategic hiring
   - Optimizing manager-to-staff ratios to 1:15
3. Provide a final recommendation

# **Data**

## Source

This analysis leverages the [NYC Payroll Data](https://data.cityofnewyork.us/resource/k397-673e.json) dataset, published by the **New York City Office of Payroll Administration (OPA)** on **NYC OpenData**. The dataset provides granular details on compensation for all municipal employees, including full-time, part-time, and seasonal workers across **169 city agencies**.

::: {.callout-tip title="Download the dataset by copying the code below"}
Click on code
:::

```{r data-import, eval=FALSE}
#| code-fold: true
#| warning: false
#| caption: "Data Import Code"

if(!file.exists("data/mp01/nyc_payroll_export.csv")){
  dir.create("data/mp01", showWarnings=FALSE, recursive=TRUE)
  
  ENDPOINT <- "https://data.cityofnewyork.us/resource/k397-673e.json"
  
  if(!require("httr2")) install.packages("httr2")
  library(httr2)
  
  if(!require("jsonlite")) install.packages("jsonlite")
  library(jsonlite)
  
  if(!require("dplyr")) install.packages("dplyr")
  library(dplyr)
  
  if(!require("readr")) install.packages("readr")
  library(readr)
  
  if(!require("stringr")) install.packages("stringr")
  library(stringr)
  
  BATCH_SIZE <- 50000
  OFFSET     <- 0
  END_OF_EXPORT <- FALSE
  ALL_DATA <- list()
  
  while(!END_OF_EXPORT){
    cat("Requesting items", OFFSET, "to", BATCH_SIZE + OFFSET, "\n")
    
    req <- request(ENDPOINT) |>
      req_url_query(`$limit`  = BATCH_SIZE, 
                    `$offset` = OFFSET)
    
    resp <- req_perform(req)
    
    batch_data <- fromJSON(resp_body_string(resp))
    
    ALL_DATA <- c(ALL_DATA, list(batch_data))
    
    if(NROW(batch_data) != BATCH_SIZE){
      END_OF_EXPORT <- TRUE
      cat("End of Data Export Reached\n")
    } else {
      OFFSET <- OFFSET + BATCH_SIZE
    }
  }
  
  ALL_DATA <- bind_rows(ALL_DATA)
  cat("Data export complete:", NROW(ALL_DATA), "rows and", NCOL(ALL_DATA), "columns.")
  write_csv(ALL_DATA, "data/mp01/nyc_payroll_export.csv")
}
```

## Data Description

The dataset includes the following key variables:

### Core Variables

| Variable | Description |
|----------|-------------|
| `fiscal_year` | Fiscal year of payroll record (July–June cycle) |
| `agency_name` | Name of employing agency (e.g., "Dept Of Education") |
| `title_description` | Job title (e.g., "Sanitation Worker") |
| `base_salary` | Annual or hourly base pay (unadjusted for overtime) |
| `regular_hours` | Hours worked at standard pay rate |
| `ot_hours` | Overtime hours worked (paid at 1.5× base rate) |
| `work_location_borough` | Primary work location (Bronx, Brooklyn, Manhattan, Queens, Staten Island) |
| `pay_basis` | Compensation structure (e.g., "per Annum", "per Hour", "Per Day") |

### Derived Variables

- **`Total_Salary`**: Calculated total compensation accounting for overtime premiums and pay basis.
    - pay_basis == "per Annum" ~ base_salary
    - pay_basis == "per Hour" ~ base_salary * (regular_hours + 1.5 * ot_hours)
    - pay_basis == "Per Day" ~ base_salary * ((regular_hours + ot_hours) / 7.5)

```{r data-processing}
#| code-fold: true
#| warning: false
#| caption: "Total Salary Calculation Code"

# This code shows how total compensation was calculated
total_comp_calculation <- function(nyc_payroll) {
  nyc_clean <- nyc_payroll %>%
    mutate(
      total_compensation = case_when(
        # High-ranking officials with fixed salary
        pay_basis == "per Annum" ~ base_salary,
        
        # Hourly employees: regular pay + 1.5x for OT
        pay_basis == "per Hour" ~ base_salary * (regular_hours + 1.5 * ot_hours),
        
        # Day-rate employees: convert total hours to days (7.5 hours/day)
        pay_basis == "Per Day" ~ base_salary * ((regular_hours + ot_hours) / 7.5),
        
        # Fallback for unexpected pay types
        TRUE ~ NA_real_
      )
    )
  
  return(nyc_clean)
}
```


### Standardization
- **Text Formatting:** Converted `agency_name`, `title_description`, and `work_location_borough` to title case for consistency
- **Borough Names:** Corrected inconsistencies (e.g., "Staten Island" vs. "STATENISLAND")



# **Policy Analysis**  

## **Policy I: Capping Salaries at Mayoral Level**  

### **Overview**

This policy evaluates the financial impact of capping municipal salaries at the New York City Mayor's level, identifying overpaid employees, potential savings, and implementation considerations.

### *Methodology*

1. Identify the Mayor's salary per fiscal year
2. Compare salaries to find employees earning more than the Mayor
3. Calculate excess compensation and estimated savings
4. Analyze agency- and position-level impacts

### *Analysis and Findings*

#### *Step 1: Identifying the Mayor's Salary*

```{r mayor-salary}
#| code-fold: true
#| caption: "Mayor's Salary Identification Code"

mayor_salary <- nyc_clean %>%
  filter(Position == "Mayor" | 
           (Agency == "Office Of The Mayor" & 
            str_detect(Position, "(?i)mayor"))) %>%
  group_by(Fiscal_Year) %>%
  summarise(Mayor_Salary = max(Total_Salary, na.rm = TRUE)) %>%
  filter(Mayor_Salary > 0)

# Display the identified salaries
kable(mayor_salary, 
      col.names = c("Fiscal Year", "Mayor's Salary"),
      format.args = list(big.mark = ","),
      caption = "Mayor's Annual Salary by Fiscal Year") %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```

#### *Step 2: Identifying Employees Earning More Than the Mayor*

```{r employees-above-mayor}
#| code-fold: true
#| caption: "Employees Above Mayor Salary Code"

employees_above_mayor <- nyc_clean %>%
  filter(!(Position == "Mayor" | 
             (Agency == "Office Of The Mayor" & 
              str_detect(Position, "(?i)mayor")))) %>%
  left_join(mayor_salary, by = "Fiscal_Year") %>%
  mutate(
    Earns_More_Than_Mayor = ifelse(Total_Salary > Mayor_Salary, "Yes", "No"),
    Excess_Amount = ifelse(Earns_More_Than_Mayor == "Yes", 
                          Total_Salary - Mayor_Salary, 0)
  ) %>%
  filter(Earns_More_Than_Mayor == "Yes") %>%
  select(Fiscal_Year, Agency, Position, Total_Salary, 
         Mayor_Salary, Excess_Amount) %>%
  arrange(desc(Excess_Amount))

# Summary table of top positions exceeding mayor's salary
top_positions <- employees_above_mayor %>%
  group_by(Position) %>%
  summarise(
    Count = n(),
    Avg_Excess = mean(Excess_Amount, na.rm = TRUE),
    Total_Excess = sum(Excess_Amount, na.rm = TRUE)
  ) %>%
  arrange(desc(Count)) %>%
  head(10)

kable(top_positions, 
      col.names = c("Position", "Count", "Average Excess", "Total Excess"),
      format.args = list(big.mark = ","),
      caption = "Top 10 Positions Exceeding Mayor's Salary") %>%
  kable_styling(bootstrap_options = c("striped", "hover")) %>%
  column_spec(2:4, width = "100px")
```

#### *Step 3: Total Savings and Impacted Groups*

```{r policy1-savings}
#| code-fold: true
#| caption: "Policy 1 Savings Calculation Code"

# Annual summary
annual_summary <- employees_above_mayor %>%
  group_by(Fiscal_Year) %>%
  summarise(
    Overpaid_Employees = n(), 
    Total_Excess = sum(Excess_Amount)
  ) %>%
  ungroup()

# Calculate total excess
total_excess <- sum(employees_above_mayor$Excess_Amount, na.rm = TRUE)

# Agency breakdown
agency_breakdown <- employees_above_mayor %>% 
  count(Agency, name = "Number_Overpaid") %>% 
  arrange(desc(Number_Overpaid)) %>%
  head(5)

# Display savings summary
kable(data.frame(
  Metric = c("Total Excess Across All Years", 
             "Total Employees Affected",
             "Average Annual Excess"),
  Value = c(dollar(total_excess),
            nrow(employees_above_mayor),
            dollar(total_excess/10))
), caption = "Policy 1 Savings Summary") %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```

### *Policy Impact Summary*

The analysis reveals a potential savings of **$2.65 million over 10 years** by capping municipal salaries at the mayoral level. The policy would affect approximately 76 employees across various agencies, with the largest impacts in the following areas:

- *Top Affected Agencies:* Comptroller (29), Actuary (12), Education (9)
- *Key Roles Impacted:* Investment Directors (13), Chief Actuaries (11), Pension Advisors (10)

### *Implementation Considerations*

While the policy offers fiscal savings, several risks must be addressed:

1. *Talent Retention:* Specialized roles requiring advanced technical expertise face recruitment challenges if compensated below market rates
2. *Morale Impact:* Sudden salary reductions could trigger higher turnover among senior leadership
3. *Unintended Consequences:* Potential indirect costs from recruitment, knowledge loss, and productivity declines

### *Recommendations*

1. *Modify Policy:*
   - Exempt critical specialized roles (actuaries, investment directors)
   - Implement gradual phase-in over 2-3 years
   - Benchmark salaries against inflation and external market rates

2. *Monitor & Report:* 
   - Track turnover rates in affected positions
   - Compare actual savings against recruitment and training costs

3. *Ensure Equity:* 
   - Focus on high-level administrative roles rather than frontline technical positions
   - Implement in conjunction with wage increases for lowest-paid workers

## **Policy II: Reducing Overtime via Strategic Hiring**  

### *Overview*

This policy examines potential cost savings by increasing full-time staffing to reduce excessive overtime expenses across agencies. By understanding the excessive overtime workers and related expenses we can replace suitable positions with full-time employees working 40 hours week on regular salary.

### *Methodology*

1. Calculate Full-Time Equivalents (FTEs) needed to replace overtime hours
2. Determine financial savings from hiring additional staff

### *Analysis and Findings*

#### *Step 1: Calculating FTEs Needed to Eliminate Overtime*

```{r overtime-analysis}
#| code-fold: true
#| caption: "Overtime Analysis Code"

overtime_analysis <- nyc_clean %>%
  # Filter to valid hourly rates and years
  filter(
    Fiscal_Year >= 2014,
    between(regular_hours, 1000, 4000)
  ) %>%
  # Calculate hourly rates SAFELY
  mutate(
    Hourly_Rate = case_when(
      pay_basis == "per Annum" ~ Total_Salary / 2080,  # Standard annual hours
      pay_basis == "Prorated Annual" ~ Total_Salary / 2080,
      pay_basis == "per Hour" ~ Total_Salary,
      pay_basis == "per Day" ~ Total_Salary / 8,
      TRUE ~ NA_real_
    )
  ) %>%
  filter(between(Hourly_Rate, 15, 200)) %>%
  
  # Group PROPERLY to count multiple employees
  group_by(Fiscal_Year, Agency, Position) %>%
  summarise(
    Total_Overtime_Hours = sum(ot_hours, na.rm = TRUE),
    Avg_Hourly_Rate = median(Hourly_Rate, na.rm = TRUE),  # Use median
    Employee_Count = n(),  # Actual number of employees
    .groups = "drop"
  ) %>%
  
  # Add sanity checks
  filter(
    Total_Overtime_Hours < 8760,  # Max = 24 hrs/day × 365 days
    Employee_Count > 1             # Require at least 2 employees
  ) %>%
  
  # Calculate realistic savings
  mutate(
    FTEs_Needed = Total_Overtime_Hours / 2080,
    Potential_Savings = (Total_Overtime_Hours * 1.5 * Avg_Hourly_Rate) - 
      (FTEs_Needed * 2080 * Avg_Hourly_Rate)
  ) %>%
  arrange(Fiscal_Year, desc(Potential_Savings))
```

Here's the information formatted as a markdown table:

| Fiscal Year | Agency | Position | Total Overtime Hours | Avg Hourly Rate | Employee Count | FTEs Needed | Potential Savings |
|-------------|--------|----------|----------------------|-----------------|----------------|-------------|-------------------|
| 2014 | Fire Department | Pilot | 8,219 | $45.70 | 15 | 3.95 | $187,676 |
| 2014 | Police Department | Computer Specialist | 8,164 | $43.00 | 41 | 3.92 | $175,428 |
| 2014 | Police Department | Captain | 4,942 | $70.50 | 409 | 2.38 | $174,129 |
| 2014 | Dept Of Environment Protection | District Supervisor | 8,087 | $41.00 | 22 | 3.89 | $165,887 |
| 2014 | Department Of Transportation | Administrative Staff Analyst | 6,688 | $44.40 | 87 | 3.22 | $148,311 |
| 2014 | Dept. Of Design & Construction | Associate Project Manager | 7,966 | $35.50 | 96 | 3.83 | $141,339 |
| 2014 | Department Of Sanitation | Metal Work Mechanic | 6,904 | $40.80 | 37 | 3.32 | $140,901 |
| 2014 | Police Department | Supervisor Of Mechanics | 5,660 | $49.20 | 49 | 2.72 | $139,149 |
| 2014 | Fire Department | Computer Associate | 8,742 | $31.00 | 19 | 4.20 | $135,706 |
| 2014 | Dept Of Environment Protection | Computer Specialist | 6,299 | $43.00 | 70 | 3.03 | $135,363 |
| | | | | | | | *27,884 more rows* |


#### *Step 2: Aggregating Savings by Agency*

```{r agency-summary}
#| code-fold: true
#| caption: "Agency Overtime Summary Code"

agency_summary <- overtime_analysis %>%
  group_by(Agency, Fiscal_Year) %>%
  summarise(
    Yearly_Savings = sum(Potential_Savings, na.rm = TRUE),
    Positions_Affected = n_distinct(Position),
    .groups = "drop"
  ) %>%
  group_by(Agency) %>%
  summarise(
    Avg_Annual_Savings = mean(Yearly_Savings, na.rm = TRUE),
    Total_10_Year_Savings = sum(Yearly_Savings, na.rm = TRUE),
    Avg_Positions_Per_Year = round(mean(Positions_Affected, na.rm = TRUE)),
    .groups = "drop"
  ) %>%
  filter(Avg_Annual_Savings > 100000) %>%
  mutate(
    Avg_Annual_Savings = scales::dollar(Avg_Annual_Savings),
    Total_10_Year_Savings = scales::dollar(Total_10_Year_Savings)
  ) %>%
  arrange(desc(Avg_Annual_Savings))

```

| Agency                           | Avg Annual Savings | Total 10-Year Savings | Avg Positions Per Year |
|----------------------------------|--------------------|----------------------|-----------------------|
| Department Of Sanitation        | $998,919          | $10,988,107          | 64                    |
| Department Of Correction        | $967,397          | $10,641,363          | 75                    |
| Department Of Buildings         | $937,786          | $10,315,641          | 50                    |
| Dept Of Citywide Admin Svcs     | $780,460          | $8,585,056           | 76                    |
| Dept. Of Design & Construction  | $755,851          | $8,314,366           | 68                    |
| Dept. Of Homeless Services      | $672,823          | $7,401,054           | 36                    |
| Housing Preservation & Dvlpmnt  | $619,355          | $6,812,901           | 72                    |
| Department Of Finance           | $589,136          | $6,480,501           | 53                    |
| Board Of Election               | $584,914          | $6,434,059           | 16                    |
| Technology & Innovation         | $554,076          | $1,108,152           | 52                    |


### *Policy Impact Summary*

The analysis reveals potential savings of approximately **$75 million over 10 years** by strategically hiring full-time employees to replace excessive overtime. Key findings include:

- *Top Savings Agencies:* Sanitation ($1M/year), Correction ($967K/year), Buildings ($938K/year)
- *High-Impact Roles:* Positions with 300+ overtime hours per employee annually
- *Implementation Target:* Focus on roles exceeding 3,000 cumulative overtime hours

### *Implementation Considerations*

1. **Cost-Benefit Analysis:** The savings calculations account for both the reduction in overtime premium (1.5×) and the additional costs of salaries and benefits for new hires
2. **Workload Implications:** Replacing overtime with regular hours improves service quality by reducing worker fatigue and potential errors
3. **Union Considerations:** Coordination with labor unions is essential as overtime reduction may impact some employees' expected compensation

### *Recommendations*

1. *Targeted Hiring:*
   - Focus on high-overtime roles (e.g., Sanitation Mechanics, Correction Legal Coordinators)
   - Prioritize agencies with savings exceeding $500,000 annually

2. *Phased Implementation:* 
   - Start with 3–5 FTEs in high-impact agencies in 2024
   - Expand based on demonstrated savings

3. *Exemptions:* 
   - Retain overtime flexibility for emergency roles (e.g., firefighters, police during crises)
   - Preserve overtime for seasonal peak demand periods

4. *Audit & Scale:* 
   - Verify data anomalies (e.g., DEP's projected $32M savings) before expanding
   - Conduct quarterly reviews to refine the model

## **Policy III: Optimizing Manager-to-Staff Ratios**

### *Overview*

This policy examines the efficiency of management structures across city agencies, identifying opportunities to streamline organizational hierarchies and reduce excessive administrative overhead.

### *Methodology*

1. Identify management positions across agencies using title analysis
2. Calculate manager-to-staff ratios for each agency
3. Determine optimal ratios and potential reduction targets
4. Model fiscal impact of management optimization

### *Analysis and Findings*

#### *Step 1: Identifying Management Positions and Calculating Ratios*

```{r management-identification}
#| code-fold: true
#| caption: "Management Ratio Analysis Code"

management_ratio <- nyc_clean %>%
  # 1. Create a more restrictive manager classification (fewer positions counted as managers)
  mutate(
    is_manager = str_detect(Position, 
                            regex("\\bmanager\\b|\\bdirector\\b|\\bchief\\b|\\bcommissioner\\b", 
                                  ignore_case = TRUE))
  ) %>%
  
  # 2. Group by agency and fiscal year to calculate ratios
  group_by(Agency, Fiscal_Year) %>%
  summarise(
    manager_count = sum(is_manager, na.rm = TRUE),
    staff_count = sum(!is_manager, na.rm = TRUE),
    total_count = n(),
    manager_ratio = manager_count / total_count,
    avg_manager_salary = mean(Total_Salary[is_manager], na.rm = TRUE),
    avg_staff_salary = mean(Total_Salary[!is_manager], na.rm = TRUE),
    .groups = "drop"
  ) %>%
  
  # 3. Focus on agencies with more meaningful data
  filter(
    total_count >= 50,  # Require larger agencies
    manager_count >= 5, # Require meaningful manager count
    staff_count > 0
  )
```

#### *Step 2: Identifying Agencies with High Management Ratios*

```{r}
#| code-fold: true
#| caption: "High Management Ratio Agencies Code"

# Identify agencies with high management ratios
high_mgmt_agencies <- management_ratio %>%
  group_by(Agency) %>%
  summarise(
    avg_manager_ratio = mean(manager_ratio, na.rm = TRUE),
    avg_total_staff = mean(total_count, na.rm = TRUE),
    avg_manager_salary = mean(avg_manager_salary, na.rm = TRUE),
    avg_staff_salary = mean(avg_staff_salary, na.rm = TRUE),
    years_of_data = n_distinct(Fiscal_Year),
    .groups = "drop"
  ) %>%
  # More restrictive filtering
  filter(
    years_of_data >= 5,            # Require more consistent data
    avg_total_staff >= 100,        # Focus on larger agencies
    avg_manager_ratio > 0.15,      # Focus on agencies with very high ratios
    avg_manager_salary > 85000     # Focus on agencies with higher-paid managers
  ) %>%
  arrange(desc(avg_manager_ratio))

# Display top agencies with high management ratios
kable(high_mgmt_agencies %>% 
        select(Agency, avg_manager_ratio, avg_total_staff) %>%
        head(10) %>%
        mutate(avg_manager_ratio = scales::percent(avg_manager_ratio, accuracy = 0.1)),
      col.names = c("Agency", "Management Ratio", "Average Staff Size"),
      caption = "Top 10 Agencies with High Management Ratios") %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```

### *Step 3: Calculating Potential Savings from Optimized Ratios*

```{r}
#| code-fold: true
#| caption: "Management Optimization Savings Code"

# Calculate potential savings with more conservative assumptions
savings_analysis <- high_mgmt_agencies %>%
  mutate(
    ideal_ratio = 0.12,            # Less aggressive target ratio (12% managers)
    excess_ratio = pmax(0, avg_manager_ratio - ideal_ratio),
    
    # Assume only 40% of excess positions can be eliminated (due to specialized roles, etc.)
    implementation_factor = 0.4,
    
    # Calculate excess managers with implementation factor
    excess_managers_per_year = ceiling(excess_ratio * avg_total_staff * implementation_factor),
    
    # Assume higher replacement cost (senior staff)
    replacement_factor = 1.4,      # 140% of average staff salary
    
    # Calculate savings with more conservative assumptions
    annual_savings_per_agency = excess_managers_per_year * 
      (avg_manager_salary - (replacement_factor * avg_staff_salary)),
    
    # Phase in over time (not immediate savings)
    ten_year_savings = annual_savings_per_agency * 7  # Assume 3 years to implement, then 7 years of savings
  ) %>%
  # Filter out any negative savings (where replacement costs exceed savings)
  filter(annual_savings_per_agency > 0) %>%
  arrange(desc(ten_year_savings))

# Display top agencies for management ratio reform
kable(savings_analysis %>%
        select(Agency, avg_manager_ratio, excess_managers_per_year, annual_savings_per_agency, ten_year_savings) %>%
        mutate(
          avg_manager_ratio = scales::percent(avg_manager_ratio, accuracy = 0.1),
          annual_savings_per_agency = scales::dollar(annual_savings_per_agency),
          ten_year_savings = scales::dollar(ten_year_savings)
        ) %>%
        head(10),
      col.names = c("Agency", "Mgmt Ratio", "Excess Positions", "Annual Savings", "10-Year Savings"),
      caption = "Top 10 Agencies for Management Ratio Reform") %>%
  kable_styling(bootstrap_options = c("striped", "hover"))

# Calculate overall impact
total_impact <- savings_analysis %>%
  summarise(
    total_agencies_affected = n(),
    total_excess_managers = sum(excess_managers_per_year),
    total_annual_savings = sum(annual_savings_per_agency),
    total_10yr_savings = sum(ten_year_savings)
  )

# Display total impact
kable(data.frame(
  Metric = c("Agencies Affected", "Excess Management Positions", 
             "Annual Savings", "10-Year Cumulative Savings"),
  Value = c(total_impact$total_agencies_affected,
            total_impact$total_excess_managers,
            scales::dollar(total_impact$total_annual_savings),
            scales::dollar(total_impact$total_10yr_savings))
), caption = "Policy III Savings Summary") %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```

## Policy Impact Summary 
The analysis reveals significant inefficiencies in management structures across New York City agencies, with potential 10-year savings of $32 million through targeted optimization of manager-to-staff ratios. Key findings include:

1. Excessive Ratios: Several agencies maintain management ratios exceeding 15% (industry standard is 10-12%)
2. Structural Inefficiency: Identified approximately 156 excess management positions across all agencies
3. Cost Impact: Average management salary premium of $42,000 compared to senior staff roles
4. Top Targets: Education, Health, and Housing agencies show the highest potential for reorganization

## Implementation Strategy:
1. *Pilot Program* - Start with 3-5 agencies showing highest potential savings
2. *Gradual Implementation* - 3-year phased approach through:
   - Natural attrition (retirements, voluntary departures)
   - Selective hiring freezes for management positions
   - Reclassification of select roles to senior staff positions
3. *Custom Targets* - Set agency-specific targets based on function and complexity
4. *Annual Review* - Assess progress and adjust targets annually

# **Overall Implementation Prioritization for 3 policies**

**Policy II: Overtime Reform (Highest Priority)**

Rationale: Offers largest savings ($75M) with fewest implementation barriers
Timeline: Begin with 3-5 FTE pilot hires in Q3 2024, expand in 2025
Key Targets: Sanitation, Correction, and Buildings departments


**Policy III: Management Ratio Optimization (Medium Priority)**

Rationale: Substantial savings ($20.7M) with moderate implementation complexity
Timeline: Launch 3-year implementation in 2025 after departmental assessments
Key Targets: Begin with Education and Health departments


**Policy I: Executive Salary Caps (Lowest Priority)**

Rationale: Smallest savings ($2.65M) with highest implementation risk
Timeline: Develop granular exemption criteria in 2025, implement in 2026
Key Targets: Focus on administrative roles while exempting technical specialists


# **Conclusion**
The three recommended policies offer a balanced approach to fiscal responsibility, addressing inefficiencies while maintaining service quality. Combined, they offer potential 10-year savings of $98.5 million that can be reinvested in critical city services or used to reduce taxpayer burden.
These reforms emphasize structural efficiency over blunt-force cuts, preserving vital functions while eliminating waste. By taking a data-driven, measured approach to implementation, New York City can achieve meaningful fiscal improvements while potentially enhancing service delivery through strategic reinvestment of savings.

**Author**: Vihan Raghuvanshi | **Date**: 2nd March 2025  
