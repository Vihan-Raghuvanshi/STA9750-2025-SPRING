labs(title = "GTA IV Award: Greenest Transit Agencies by Size Category",
subtitle = "Pounds of CO2 emissions per passenger mile",
x = NULL,
y = "CO2 Emissions (lbs) per Passenger Mile",
caption = "Source: National Transit Database (NTD) & EPA Carbon Emissions Factors") +
scale_fill_brewer(palette = "Greens", direction = -1) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "top",
legend.title = element_blank()
)
# Calculate the median CO2 per passenger mile
median_co2_per_mile <- median(greenest_agencies$CO2_per_Mile, na.rm = TRUE)
# Then create your visualization
greenest_viz <- ggplot() +
# Add bars for the winners
geom_col(data = greenest_agencies,
aes(x = reorder(`Agency Name`, -CO2_per_Mile), y = CO2_per_Mile, fill = Size_Category),
alpha = 0.8) +
# Add reference line for median
geom_hline(yintercept = median_co2_per_mile, linetype = "dashed", color = "red") +
geom_text(aes(0, median_co2_per_mile, label = paste0("Median: ", round(median_co2_per_mile, 2), " lbs CO2/mile")),
hjust = -0.1, vjust = -0.5, color = "red") +
# Labels and formatting
labs(title = "GTA IV Award: Greenest Transit Agencies by Size Category",
subtitle = "Pounds of CO2 emissions per passenger mile",
x = NULL,
y = "CO2 Emissions (lbs) per Passenger Mile",
caption = "Source: National Transit Database (NTD) & EPA Carbon Emissions Factors") +
scale_fill_brewer(palette = "Greens", direction = -1) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "top",
legend.title = element_blank()
)
greenest_viz
# Visualization 2: Most Emissions Avoided
emissions_avoided_viz <- ggplot() +
# Add bars for winners
geom_col(data = emissions_avoided_winners,
aes(x = reorder(`Agency Name`, CO2_Emissions_Avoided),
y = CO2_Emissions_Avoided / 1000000, fill = Size_Category),
alpha = 0.8) +
# Add reference line for median
geom_hline(yintercept = median_emissions_avoided / 1000000,
linetype = "dashed", color = "red") +
geom_text(aes(0, median_emissions_avoided / 1000000,
label = paste0("Median: ", round(median_emissions_avoided / 1000000, 2), " million lbs")),
hjust = -0.1, vjust = -0.5, color = "red") +
# Labels and formatting
labs(title = "GTA IV Award: Most Emissions Avoided by Transit Agencies",
subtitle = "Millions of pounds of CO2 emissions avoided compared to car travel",
x = NULL,
y = "CO2 Emissions Avoided (million lbs)",
caption = "Source: National Transit Database (NTD), EPA Carbon Emissions Factors & CAFE Standards") +
scale_fill_brewer(palette = "Blues", direction = -1) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "top",
legend.title = element_blank()
)
# Calculate the median emissions avoided
median_emissions_avoided <- median(emissions_avoided_winners$CO2_Emissions_Avoided, na.rm = TRUE)
# Then create your visualization
emissions_avoided_viz <- ggplot() +
# Add bars for winners
geom_col(data = emissions_avoided_winners,
aes(x = reorder(`Agency Name`, CO2_Emissions_Avoided),
y = CO2_Emissions_Avoided / 1000000, fill = Size_Category),
alpha = 0.8) +
# Add reference line for median
geom_hline(yintercept = median_emissions_avoided / 1000000,
linetype = "dashed", color = "red") +
geom_text(aes(0, median_emissions_avoided / 1000000,
label = paste0("Median: ", round(median_emissions_avoided / 1000000, 2), " million lbs")),
hjust = -0.1, vjust = -0.5, color = "red") +
# Labels and formatting
labs(title = "GTA IV Award: Most Emissions Avoided by Transit Agencies",
subtitle = "Millions of pounds of CO2 emissions avoided compared to car travel",
x = NULL,
y = "CO2 Emissions Avoided (million lbs)",
caption = "Source: National Transit Database (NTD), EPA Carbon Emissions Factors & CAFE Standards") +
scale_fill_brewer(palette = "Blues", direction = -1) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "top",
legend.title = element_blank()
)
emissions_avoided_viz
electrification_viz <- ggplot() +
# Add bars for winners
geom_col(data = electrification_winners,
aes(x = reorder(`Agency Name`, Percent_Electric),
y = Percent_Electric, fill = Size_Category),
alpha = 0.8) +
# Add reference line for median
geom_hline(yintercept = median_percent_electric,
linetype = "dashed", color = "red") +
geom_text(aes(0, median_percent_electric,
label = paste0("Median: ", round(median_percent_electric, 1), "%")),
hjust = -0.1, vjust = -0.5, color = "red") +
# Labels and formatting
labs(title = "GTA IV Award: Transit Electrification Leaders",
subtitle = "Percentage of transit fuel from electric sources",
x = NULL,
y = "Electric Fuel Usage (%)",
caption = "Source: National Transit Database (NTD)") +
scale_fill_brewer(palette = "Purples", direction = -1) +
scale_y_continuous(limits = c(0, 100)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "top",
legend.title = element_blank()
)
electrification_viz <- ggplot() +
# Add bars for winners
geom_col(data = electrification_winners,
aes(x = reorder(`Agency Name`, Percent_Electric),
y = Percent_Electric, fill = Size_Category),
alpha = 0.8) +
# Add reference line for median
geom_hline(yintercept = median_percent_electric,
linetype = "dashed", color = "red") +
geom_text(aes(0, median_percent_electric,
label = paste0("Median: ", round(median_percent_electric, 1), "%")),
hjust = -0.1, vjust = -0.5, color = "red") +
# Labels and formatting
labs(title = "GTA IV Award: Transit Electrification Leaders",
subtitle = "Percentage of transit fuel from electric sources",
x = NULL,
y = "Electric Fuel Usage (%)",
caption = "Source: National Transit Database (NTD)") +
scale_fill_brewer(palette = "Purples", direction = -1) +
scale_y_continuous(limits = c(0, 100)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "top",
legend.title = element_blank()
)
median_percent_electric <- median(electrification_winners$Percent_Electric, na.rm = TRUE)
# Then create your visualization
electrification_viz <- ggplot() +
# Add bars for winners
geom_col(data = electrification_winners,
aes(x = reorder(`Agency Name`, Percent_Electric),
y = Percent_Electric, fill = Size_Category),
alpha = 0.8) +
# Add reference line for median
geom_hline(yintercept = median_percent_electric,
linetype = "dashed", color = "red") +
geom_text(aes(0, median_percent_electric,
label = paste0("Median: ", round(median_percent_electric, 1), "%")),
hjust = -0.1, vjust = -0.5, color = "red") +
# Labels and formatting
labs(title = "GTA IV Award: Transit Electrification Leaders",
subtitle = "Percentage of transit fuel from electric sources",
x = NULL,
y = "Electric Fuel Usage (%)",
caption = "Source: National Transit Database (NTD)") +
scale_fill_brewer(palette = "Purples", direction = -1) +
scale_y_continuous(limits = c(0, 100)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "top",
legend.title = element_blank()
)
electrification_viz
electrification_viz <- ggplot() +
# Add bars for winners
geom_col(data = electrification_winners,
aes(x = reorder(`Agency Name`, Percent_Electric),
y = Percent_Electric, fill = Size_Category),
alpha = 0.8) +
# Add reference line for median
geom_hline(yintercept = median_percent_electric,
linetype = "dashed", color = "red") +
geom_text(aes(0, median_percent_electric,
label = paste0("Median: ", round(median_percent_electric, 1), "%")),
hjust = -0.1, vjust = -0.5, color = "red") +
# Labels and formatting
labs(title = "GTA IV Award: Transit Electrification Leaders",
subtitle = "Percentage of transit fuel from electric sources",
x = NULL,
y = "Electric Fuel Usage (%)",
caption = "Source: National Transit Database (NTD)") +
scale_fill_brewer(palette = "Purples", direction = -1, na.value = NA, drop = TRUE) +
scale_y_continuous(limits = c(0, 100)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "top",
legend.title = element_blank()
)
electrification_viz
electrification_viz <- ggplot() +
# Add bars for winners
geom_col(data = electrification_winners,
aes(x = reorder(`Agency Name`, Percent_Electric),
y = Percent_Electric, fill = Size_Category),
alpha = 0.8) +
# Add reference line for median
geom_hline(yintercept = median_percent_electric,
linetype = "dashed", color = "red") +
geom_text(aes(0, median_percent_electric,
label = paste0("Median: ", round(median_percent_electric, 1), "%")),
hjust = -0.1, vjust = -0.5, color = "red") +
# Labels and formatting
labs(title = "GTA IV Award: Transit Electrification Leaders",
subtitle = "Percentage of transit fuel from electric sources",
x = NULL,
y = "Electric Fuel Usage (%)",
caption = "Source: National Transit Database (NTD)") +
scale_fill_brewer(palette = "Purples", direction = -1, na.value = NA, drop = TRUE) +
scale_y_continuous(limits = c(0, 100)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "top",
legend.title = element_blank()
)
electrification_viz
# Remove NA values from Size_Category if needed
electrification_winners$Size_Category[is.na(electrification_winners$Size_Category)] <- "Unknown"
electrification_viz
electrification_viz <- ggplot() +
# Add bars for winners
geom_col(data = electrification_winners,
aes(x = reorder(`Agency Name`, Percent_Electric),
y = Percent_Electric, fill = Size_Category),
alpha = 0.8) +
# Add reference line for median
geom_hline(yintercept = median_percent_electric,
linetype = "dashed", color = "red") +
geom_text(aes(0, median_percent_electric,
label = paste0("Median: ", round(median_percent_electric, 1), "%")),
hjust = -0.1, vjust = -0.5, color = "red") +
# Labels and formatting
labs(title = "GTA IV Award: Transit Electrification Leaders",
subtitle = "Percentage of transit fuel from electric sources",
x = NULL,
y = "Electric Fuel Usage (%)",
caption = "Source: National Transit Database (NTD)") +
scale_fill_brewer(palette = "Purples", direction = -1, drop = TRUE) +
scale_y_continuous(limits = c(0, 100)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "top",
legend.title = element_blank()
) +
# Explicitly control which values appear in the legend
guides(fill = guide_legend(override.aes = list(alpha = 0.8),
breaks = c("Large", "Medium", "Small")))
electrification_viz
emissions_avoided_viz
emissions_avoided_viz <- ggplot(emissions_avoided_winners,
aes(x = CO2_Emissions_Avoided / 1000000,
y = reorder(`Agency Name`, CO2_Emissions_Avoided),
color = Size_Category)) +
# Add points
geom_point(size = 5, alpha = 0.8) +
# Add reference line for median
geom_vline(xintercept = median_emissions_avoided / 1000000,
linetype = "dashed", color = "red") +
geom_text(aes(x = median_emissions_avoided / 1000000, y = 0.5,
label = paste0("Median: ", round(median_emissions_avoided / 1000000, 2), " million lbs")),
angle = 90, hjust = -0.1, color = "red") +
# Labels and formatting
labs(title = "GTA IV Award: Most Emissions Avoided by Transit Agencies",
subtitle = "Millions of pounds of CO2 emissions avoided compared to car travel",
y = NULL,
x = "CO2 Emissions Avoided (million lbs)",
caption = "Source: National Transit Database (NTD), EPA Carbon Emissions Factors & CAFE Standards") +
scale_color_brewer(palette = "Blues", direction = -1) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold"),
legend.position = "top",
legend.title = element_blank()
)
emissions_avoided_viz
# Create a faceted plot by Size_Category
emissions_avoided_viz <- ggplot(emissions_avoided_winners,
aes(x = reorder(`Agency Name`, CO2_Emissions_Avoided),
y = CO2_Emissions_Avoided / 1000000,
fill = Size_Category)) +
# Add bars with consistent coloring
geom_col(alpha = 0.8) +
# Facet by size category to give each its own panel
facet_wrap(~ Size_Category, scales = "free_x", nrow = 3) +
# Add reference line for median per category
geom_hline(data = emissions_avoided_winners %>%
group_by(Size_Category) %>%
summarize(median = median(CO2_Emissions_Avoided, na.rm = TRUE) / 1000000),
aes(yintercept = median),
linetype = "dashed", color = "red") +
# Labels and formatting
labs(title = "GTA IV Award: Most Emissions Avoided by Transit Agencies",
subtitle = "Millions of pounds of CO2 emissions avoided compared to car travel",
x = NULL,
y = "CO2 Emissions Avoided (million lbs)",
caption = "Source: National Transit Database (NTD), EPA Carbon Emissions Factors & CAFE Standards") +
scale_fill_brewer(palette = "Blues", direction = -1) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "none",
strip.text = element_text(face = "bold", size = 12),
panel.spacing.y = unit(1, "cm")
)
emissions_avoided_viz
# Alternative approach using facets with free scales
emissions_avoided_viz <- ggplot(emissions_avoided_winners,
aes(x = reorder(`Agency Name`, CO2_Emissions_Avoided),
y = CO2_Emissions_Avoided / 1000000)) +
# Add bars with consistent coloring by category
geom_col(aes(fill = Size_Category), alpha = 0.8) +
# Facet by size category with free scales
facet_wrap(~ Size_Category, scales = "free", nrow = 3) +
# Labels and formatting
labs(title = "GTA IV Award: Most Emissions Avoided by Transit Agencies",
subtitle = "Millions of pounds of CO2 emissions avoided compared to car travel",
x = NULL,
y = "CO2 Emissions Avoided (million lbs)",
caption = "Source: National Transit Database (NTD), EPA Carbon Emissions Factors & CAFE Standards") +
scale_fill_brewer(palette = "Blues", direction = -1) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "none",
strip.text = element_text(face = "bold", size = 12)
)
emissions_avoided_viz
emissions_avoided_viz <- ggplot() +
# Add bars for winners
geom_col(data = emissions_avoided_winners,
aes(x = reorder(`Agency Name`, CO2_Emissions_Avoided),
y = CO2_Emissions_Avoided / 1000000, fill = Size_Category),
alpha = 0.8) +
# Add reference line for median
geom_hline(yintercept = median_emissions_avoided / 1000000,
linetype = "dashed", color = "red") +
geom_text(aes(0, median_emissions_avoided / 1000000,
label = paste0("Median: ", round(median_emissions_avoided / 1000000, 2), " million lbs")),
hjust = -0.1, vjust = -0.5, color = "red") +
# Labels and formatting
labs(title = "GTA IV Award: Most Emissions Avoided by Transit Agencies",
subtitle = "Millions of pounds of CO2 emissions avoided compared to car travel",
x = NULL,
y = "CO2 Emissions Avoided (million lbs)",
caption = "Source: National Transit Database (NTD), EPA Carbon Emissions Factors & CAFE Standards") +
scale_fill_brewer(palette = "Blues", direction = -1) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold"),
legend.position = "top",
legend.title = element_blank()
)
emissions_avoided_viz
*Report prepared by the Green Transit Research Initiative*
git pull origin main && git push origin main
git pull origin main && git push origin main
install.packages("datasauRus")
install.packages("datasauRus")
library(datasauRus); data(datasaurus_dozen)
gganimate(datasaurus_dozen)
gganimate?
q
?gganimate
library(datasauRus)
library(ggplot2)
library(gganimate)
install.packages("gganimate")
library(gganimate)
data("datasaurus_dozen")
animated_plot <- ggplot(datasaurus_dozen, aes(x = x, y = y)) +
geom_point() +
theme_minimal() +
labs(title = 'Dataset: {closest_state}',
x = 'x',
y = 'y') +
transition_states(dataset,
transition_length = 2,
state_length = 3) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
animate(animated_plot,
nframes = 100,
fps = 10,
width = 800,
height = 600)
library(sf)
nc <- read_sf(system.file("shape/nc.shp", package="sf"))
nc
library(dplyr)
nc |> select(NAME, AREA, PERIMETER, geometry)
library(ggplot2)
ggplot(nc, aes(geometry = geometry)) + geom_sf()
library(ggplot2)
ggplot(nc, aes(geometry = geometry,
fill = BIR74)) + geom_sf()
nycc <- read_sf("nycc.shp")
nycc <- read_sf("downloads/nycc.shp")
nycc <- read_sf("~/downloads/nyad_25a/nyad.shp")
ggplot(nycc, aes(geomatery = geometry)) + geom_sf()
Load_songs
load_songs
load_songs <- function() {
# Ensure necessary packages are available
ensure_package <- function(pkg) {
pkg <- as.character(substitute(pkg))
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require(pkg, character.only = TRUE)) install.packages(pkg)
stopifnot(require(pkg, character.only = TRUE))
}
ensure_package(dplyr)
# Create directory if it doesn't exist
dir_name <- file.path("data", "mp03")
dir.create(dir_name, showWarnings = FALSE, recursive = TRUE)
# Define file path
file_path <- file.path(dir_name, "spotify_songs.csv")
# Download file if it doesn't exist
if (!file.exists(file_path)) {
download.file(
url = "https://raw.githubusercontent.com/gabminamedez/spotify-data/refs/heads/master/data.csv",
destfile = file_path,
method = "auto",
quiet = FALSE
)
}
# Read the data into R
songs_data <- read.csv(file_path)
# Return the data frame
return(songs_data)
}
load_songs()
view(load_songs())
load_songs <- function() {
# Ensure necessary packages are available
ensure_package <- function(pkg) {
pkg <- as.character(substitute(pkg))
options(repos = c(CRAN = "https://cloud.r-project.org"))
if (!require(pkg, character.only = TRUE)) install.packages(pkg)
stopifnot(require(pkg, character.only = TRUE))
}
ensure_package(dplyr)
ensure_package(tidyr)
ensure_package(stringr)
# Create directory if it doesn't exist
dir_name <- file.path("data", "mp03")
dir.create(dir_name, showWarnings = FALSE, recursive = TRUE)
# Define file path
file_path <- file.path(dir_name, "spotify_songs.csv")
# Download file if it doesn't exist
if (!file.exists(file_path)) {
download.file(
url = "https://raw.githubusercontent.com/gabminamedez/spotify-data/refs/heads/master/data.csv",
destfile = file_path,
method = "auto",
quiet = FALSE
)
}
# Read the data into R
songs_data <- read.csv(file_path)
# Clean the artists column
clean_artist_string <- function(x) {
str_replace_all(x, "\\['", "") |>
str_replace_all("'\\]", "") |>
str_replace_all(" '", "")
}
songs_clean <- songs_data |>
tidyr::separate_longer_delim(artists, ",") |>
dplyr::mutate(artist = clean_artist_string(artists)) |>
dplyr::select(-artists)
# Return the cleaned data frame
return(songs_clean)
}
songs_clean
library(tidyr)
library(stringr)
clean_artist_string <- function(x){
str_replace_all(x, "\\['", "") |>
str_replace_all("'\\]", "") |>
str_replace_all(" '", "")
}
SONGS |>
separate_longer_delim(artists, ",") |>
mutate(artist = clean_artist_string(artists)) |>
select(-artists)
songs_data
load_songs
