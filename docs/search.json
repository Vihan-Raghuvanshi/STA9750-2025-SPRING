[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hello everyone and welcome to my website!",
    "section": "",
    "text": "My name is Vihan Raghuvanshi. Here’s a brief about my educational, professional background and how my skills can benefit your organization\nFun Fact: About 90% of the world’s data was created in between 2021-2023. In today’s data-driven world, businesses need professionals who can bridge the gap between analytics and strategy. That’s where I come in.\nI’m Vihan Raghuvanshi currently pursuing Masters in Business Analytics at Zicklin School of Business. As an MBA graduate from DeGroote School of business,McMaster University, I gained a solid foundation in business strategies. I have hands-on experience in CPG sector across APAC and Americas collaborating with industry leaders like P&G, Dyson, and McCormick. My technical expertise and cultural adaptability enable me to solve complex business problems while collaborating with international teams. In summary, with my expertise in data and business strategy, I can effectively deliver impactful solutions for your organization.\nFor more information, please see my linkedin here or else feel free to reach out via email. Thank you.\n\n\nLast Updated: Friday 02 07, 2025 at 17:34PM"
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "National Transit Sustainability Report",
    "section": "",
    "text": "This report provides a comprehensive analysis of transit agency environmental performance across the United States, leveraging data from the National Transit Database (NTD) and state-level energy information. By examining emissions, energy consumption, and service metrics, we offer unprecedented insights into the environmental impact and sustainability of public transit systems.\n\n\n\n\n\nThe national weighted average CO₂ emissions for transit is approximately 1,030 pounds per megawatt-hour of electricity generated.\nSignificant variations exist between states, with some states producing over 50% more emissions than others in transit energy production.\n\n\n\n\nGreenest Transit Agencies - Top-performing agencies achieve remarkably low emissions, with some delivering service at less than 0.1 pounds of CO₂ per passenger mile. - Large transit agencies demonstrate 25-30% better median efficiency compared to smaller agencies.\nEmissions Avoidance - Leading transit agencies prevent emissions equivalent to removing 10,000+ cars from roads annually. - These systems provide critical environmental benefits by offering sustainable transportation alternatives.\n\n\n\n\nWhile some agencies have achieved 100% electrification, the median electric fuel usage remains below 30%.\nSignificant opportunities exist for industry-wide transition to electric and low-carbon transit solutions."
  },
  {
    "objectID": "mp02.html#executive-summary",
    "href": "mp02.html#executive-summary",
    "title": "National Transit Sustainability Report",
    "section": "",
    "text": "This report provides a comprehensive analysis of transit agency environmental performance across the United States, leveraging data from the National Transit Database (NTD) and state-level energy information. By examining emissions, energy consumption, and service metrics, we offer unprecedented insights into the environmental impact and sustainability of public transit systems.\n\n\n\n\n\nThe national weighted average CO₂ emissions for transit is approximately 1,030 pounds per megawatt-hour of electricity generated.\nSignificant variations exist between states, with some states producing over 50% more emissions than others in transit energy production.\n\n\n\n\nGreenest Transit Agencies - Top-performing agencies achieve remarkably low emissions, with some delivering service at less than 0.1 pounds of CO₂ per passenger mile. - Large transit agencies demonstrate 25-30% better median efficiency compared to smaller agencies.\nEmissions Avoidance - Leading transit agencies prevent emissions equivalent to removing 10,000+ cars from roads annually. - These systems provide critical environmental benefits by offering sustainable transportation alternatives.\n\n\n\n\nWhile some agencies have achieved 100% electrification, the median electric fuel usage remains below 30%.\nSignificant opportunities exist for industry-wide transition to electric and low-carbon transit solutions."
  },
  {
    "objectID": "mp02.html#task---1-data-import",
    "href": "mp02.html#task---1-data-import",
    "title": "National Transit Sustainability Report",
    "section": "Task - 1 Data Import",
<<<<<<< Updated upstream
    "text": "Task - 1 Data Import\n\n\nCode\nget_eia_sep &lt;- function(state, abbr){\n  state_formatted &lt;- str_to_lower(state) |&gt; str_replace_all(\"\\\\s\", \"\")\n  \n  dir_name &lt;- file.path(\"data\", \"mp02\")\n  file_name &lt;- file.path(dir_name, state_formatted)\n  \n  dir.create(dir_name, showWarnings=FALSE, recursive=TRUE)\n  \n  if(!file.exists(file_name)){\n    BASE_URL &lt;- \"https://www.eia.gov\"\n    REQUEST &lt;- request(BASE_URL) |&gt; \n      req_url_path(\"electricity\", \"state\", state_formatted)\n    \n    RESPONSE &lt;- req_perform(REQUEST)\n    \n    resp_check_status(RESPONSE)\n    \n    writeLines(resp_body_string(RESPONSE), file_name)\n  }\n  \n  TABLE &lt;- read_html(file_name) |&gt; \n    html_element(\"table\") |&gt; \n    html_table() |&gt;\n    mutate(Item = str_to_lower(Item))\n  \n  if(\"U.S. rank\" %in% colnames(TABLE)){\n    TABLE &lt;- TABLE |&gt; rename(Rank = `U.S. rank`)\n  }\n  \n  CO2_MWh &lt;- TABLE |&gt; \n    filter(Item == \"carbon dioxide (lbs/mwh)\") |&gt;\n    pull(Value) |&gt; \n    str_replace_all(\",\", \"\") |&gt;\n    as.numeric()\n  \n  PRIMARY &lt;- TABLE |&gt; \n    filter(Item == \"primary energy source\") |&gt; \n    pull(Rank)\n  \n  RATE &lt;- TABLE |&gt;\n    filter(Item == \"average retail price (cents/kwh)\") |&gt;\n    pull(Value) |&gt;\n    as.numeric()\n  \n  GENERATION_MWh &lt;- TABLE |&gt;\n    filter(Item == \"net generation (megawatthours)\") |&gt;\n    pull(Value) |&gt;\n    str_replace_all(\",\", \"\") |&gt;\n    as.numeric()\n  \n  data.frame(CO2_MWh               = CO2_MWh, \n             primary_source        = PRIMARY,\n             electricity_price_MWh = RATE * 10, # / 100 cents to dollars &\n             # * 1000 kWh to MWH \n             generation_MWh        = GENERATION_MWh, \n             state                 = state, \n             abbreviation          = abbr\n  )\n}\n\nEIA_SEP_REPORT &lt;- map2(state.name, state.abb, get_eia_sep) |&gt; list_rbind()\n\n\n\nEIA SIP REPORT (Arranged in decreasing CO2 emission)\n\n\nCode\nEIA_SEP_REPORT |&gt; \n  select(-abbreviation) |&gt;\n  arrange(desc(CO2_MWh)) |&gt;\n  mutate(CO2_MWh = number(CO2_MWh, big.mark=\",\"), \n         electricity_price_MWh = dollar(electricity_price_MWh), \n         generation_MWh = number(generation_MWh, big.mark=\",\")) |&gt;\n  rename(`Pounds of CO2 Emitted per MWh` = CO2_MWh, \n         `Primary Energy Source` = primary_source,\n         `Price per MWh` = electricity_price_MWh,\n         `Generation (MWh)` = generation_MWh,\n         State = state) |&gt;\n  kable(caption = \"State Electricity Profiles\") |&gt;\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\")) |&gt;\n  scroll_box(width = \"100%\", height = \"400px\")\n\n\n\n\nState Electricity Profiles\n\n\nPounds of CO2 Emitted per MWh\nPrimary Energy Source\nPrice per MWh\nGeneration (MWh)\nState\n\n\n\n\n1,925\nCoal\n$102.60\n52,286,784\nWest Virginia\n\n\n1,864\nCoal\n$83.90\n43,181,420\nWyoming\n\n\n1,741\nCoal\n$99.60\n63,217,080\nKentucky\n\n\n1,514\nCoal\n$108.70\n66,703,285\nMissouri\n\n\n1,497\nCoal\n$114.90\n90,046,880\nIndiana\n\n\n1,444\nPetroleum\n$386.00\n9,194,164\nHawaii\n\n\n1,414\nCoal\n$80.30\n42,068,807\nNorth Dakota\n\n\n1,354\nCoal\n$90.30\n33,496,554\nUtah\n\n\n1,180\nNatural gas\n$214.10\n6,717,825\nAlaska\n\n\n1,148\nNatural gas\n$127.20\n62,548,705\nWisconsin\n\n\n1,127\nCoal\n$109.70\n26,895,758\nMontana\n\n\n1,103\nCoal\n$91.40\n39,445,955\nNebraska\n\n\n1,095\nNatural gas\n$128.50\n4,772,059\nDelaware\n\n\n1,054\nCoal\n$117.60\n57,541,720\nColorado\n\n\n1,044\nNatural gas\n$110.40\n133,223,464\nOhio\n\n\n987\nNatural gas\n$97.30\n63,195,647\nArkansas\n\n\n966\nNatural gas\n$89.10\n97,784,565\nLouisiana\n\n\n923\nNatural gas\n$232.10\n19,695,884\nMassachusetts\n\n\n912\nNatural gas\n$136.80\n120,656,625\nMichigan\n\n\n855\nNatural gas\n$100.40\n547,294,552\nTexas\n\n\n847\nNatural gas\n$216.20\n10,430,846\nRhode Island\n\n\n817\nNatural gas\n$109.50\n72,933,440\nMississippi\n\n\n801\nWind\n$122.10\n57,276,862\nMinnesota\n\n\n794\nNatural gas\n$135.30\n259,798,479\nFlorida\n\n\n775\nWind\n$94.20\n69,836,973\nIowa\n\n\n763\nWind\n$108.00\n58,456,598\nKansas\n\n\n759\nWind\n$94.70\n39,269,073\nNew Mexico\n\n\n733\nNatural gas\n$110.60\n129,221,513\nGeorgia\n\n\n727\nNatural gas\n$114.70\n139,435,010\nAlabama\n\n\n715\nNuclear\n$106.90\n77,791,204\nTennessee\n\n\n684\nNatural gas\n$121.90\n111,838,736\nArizona\n\n\n655\nNatural gas\n$125.70\n235,924,937\nPennsylvania\n\n\n654\nNatural gas\n$130.90\n42,164,375\nNevada\n\n\n648\nNatural gas\n$93.00\n89,236,024\nOklahoma\n\n\n639\nNatural gas\n$106.10\n126,553,394\nNorth Carolina\n\n\n594\nNatural gas\n$106.80\n91,059,344\nVirginia\n\n\n576\nNatural gas\n$242.40\n40,666,418\nConnecticut\n\n\n558\nNatural gas\n$143.40\n36,000,650\nMaryland\n\n\n558\nNuclear\n$105.00\n100,853,387\nSouth Carolina\n\n\n522\nNuclear\n$117.50\n177,737,641\nIllinois\n\n\n522\nNatural gas\n$182.80\n124,039,988\nNew York\n\n\n518\nNatural gas\n$152.70\n64,228,924\nNew Jersey\n\n\n440\nNatural gas\n$248.70\n216,628,794\nCalifornia\n\n\n428\nNatural gas\n$208.40\n12,512,181\nMaine\n\n\n370\nHydroelectric\n$90.80\n17,842,446\nIdaho\n\n\n369\nWind\n$104.90\n17,436,158\nSouth Dakota\n\n\n344\nHydroelectric\n$103.20\n61,691,869\nOregon\n\n\n292\nHydroelectric\n$95.80\n102,960,605\nWashington\n\n\n269\nNuclear\n$229.60\n16,824,999\nNew Hampshire\n\n\n8\nHydroelectric\n$175.30\n2,480,199\nVermont"
=======
    "text": "Task - 1 Data Import\n\n\nCode\nget_eia_sep &lt;- function(state, abbr){\n  state_formatted &lt;- str_to_lower(state) |&gt; str_replace_all(\"\\\\s\", \"\")\n  \n  dir_name &lt;- file.path(\"data\", \"mp02\")\n  file_name &lt;- file.path(dir_name, state_formatted)\n  \n  dir.create(dir_name, showWarnings=FALSE, recursive=TRUE)\n  \n  if(!file.exists(file_name)){\n    BASE_URL &lt;- \"https://www.eia.gov\"\n    REQUEST &lt;- request(BASE_URL) |&gt; \n      req_url_path(\"electricity\", \"state\", state_formatted)\n    \n    RESPONSE &lt;- req_perform(REQUEST)\n    \n    resp_check_status(RESPONSE)\n    \n    writeLines(resp_body_string(RESPONSE), file_name)\n  }\n  \n  TABLE &lt;- read_html(file_name) |&gt; \n    html_element(\"table\") |&gt; \n    html_table() |&gt;\n    mutate(Item = str_to_lower(Item))\n  \n  if(\"U.S. rank\" %in% colnames(TABLE)){\n    TABLE &lt;- TABLE |&gt; rename(Rank = `U.S. rank`)\n  }\n  \n  CO2_MWh &lt;- TABLE |&gt; \n    filter(Item == \"carbon dioxide (lbs/mwh)\") |&gt;\n    pull(Value) |&gt; \n    str_replace_all(\",\", \"\") |&gt;\n    as.numeric()\n  \n  PRIMARY &lt;- TABLE |&gt; \n    filter(Item == \"primary energy source\") |&gt; \n    pull(Rank)\n  \n  RATE &lt;- TABLE |&gt;\n    filter(Item == \"average retail price (cents/kwh)\") |&gt;\n    pull(Value) |&gt;\n    as.numeric()\n  \n  GENERATION_MWh &lt;- TABLE |&gt;\n    filter(Item == \"net generation (megawatthours)\") |&gt;\n    pull(Value) |&gt;\n    str_replace_all(\",\", \"\") |&gt;\n    as.numeric()\n  \n  data.frame(CO2_MWh               = CO2_MWh, \n             primary_source        = PRIMARY,\n             electricity_price_MWh = RATE * 10, # / 100 cents to dollars &\n             # * 1000 kWh to MWH \n             generation_MWh        = GENERATION_MWh, \n             state                 = state, \n             abbreviation          = abbr\n  )\n}\n\nEIA_SEP_REPORT &lt;- map2(state.name, state.abb, get_eia_sep) |&gt; list_rbind()\n\n\n\nEIA SIP REPORT (Arranged in decreasing CO2 emission)\n\n\nCode\nEIA_SEP_REPORT |&gt; \n  select(-abbreviation) |&gt;\n  arrange(desc(CO2_MWh)) |&gt;\n  mutate(CO2_MWh = number(CO2_MWh, big.mark=\",\"), \n         electricity_price_MWh = dollar(electricity_price_MWh), \n         generation_MWh = number(generation_MWh, big.mark=\",\")) |&gt;\n  rename(`Pounds of CO2 Emitted per MWh of Electricity Produced` = CO2_MWh, \n         `Primary Source of Electricity Generation` = primary_source, \n         `Average Retail Price for 1000 kWh` = electricity_price_MWh, \n         `Total Generation Capacity (MWh)` = generation_MWh, \n         State = state) |&gt;\n datatable(options = list(pageLength = 5))"
>>>>>>> Stashed changes
  },
  {
    "objectID": "mp02.html#task-2-data-exploring",
    "href": "mp02.html#task-2-data-exploring",
    "title": "National Transit Sustainability Report",
    "section": "Task-2 Data Exploring",
    "text": "Task-2 Data Exploring\n1. Most Expensive Retail Electricity\n\n\nCode\nmost_expensive &lt;- EIA_SEP_REPORT |&gt;\n  arrange(desc(electricity_price_MWh)) |&gt;\n  slice(1) |&gt;\n  select(State = state, \n         `Price per MWh` = electricity_price_MWh) |&gt;\n  mutate(`Price per MWh` = dollar(`Price per MWh`))\n\nkable(most_expensive, \n      caption = \"State with Most Expensive Electricity\") |&gt;\n  kable_styling(bootstrap_options = \"striped\")\n\n\n\nState with Most Expensive Electricity\n\n\nState\nPrice per MWh\n\n\n\n\nHawaii\n$386\n\n\n\n\n\n\n\n2. Dirtiest Electricity mix\n\n\nCode\ndirtiest &lt;- EIA_SEP_REPORT |&gt;\n  arrange(desc(CO2_MWh)) |&gt;\n  slice(1) |&gt;\n  select(State = state, \n         `CO₂ lbs/MWh` = CO2_MWh) |&gt;\n  mutate(`CO₂ lbs/MWh` = number(`CO₂ lbs/MWh`, big.mark = \",\"))\n\nkable(dirtiest, \n      caption = \"State with Dirtiest Electricity Generation\") |&gt;\n  kable_styling(bootstrap_options = \"striped\")\n\n\n\nState with Dirtiest Electricity Generation\n\n\nState\nCO₂ lbs/MWh\n\n\n\n\nWest Virginia\n1,925\n\n\n\n\n\n\n\nCode\ncat(\"The state with the dirtiest electricity mix is\", dirtiest$State, \n    \"with\", dirtiest$`CO₂ lbs/MWh`, \"pounds of CO₂ emitted per MWh.\")\n\n\nThe state with the dirtiest electricity mix is West Virginia with 1,925 pounds of CO₂ emitted per MWh.\n\n\n3. National weighted average CO2 emission\n\n\nCode\nweighted_avg &lt;- EIA_SEP_REPORT |&gt;\n  summarize(`Weighted Avg CO₂ (lbs/MWh)` = \n            round(sum(CO2_MWh * generation_MWh) / sum(generation_MWh)))\n\nkable(weighted_avg, \n      caption = \"National Weighted Average CO₂ Emissions\") |&gt;\n  kable_styling(bootstrap_options = \"striped\")\n\n\n\nNational Weighted Average CO₂ Emissions\n\n\nWeighted Avg CO₂ (lbs/MWh)\n\n\n\n\n805\n\n\n\n\n\n\n\n4. Rarest Primary energy source\n\n\nCode\nrarest_info &lt;- EIA_SEP_REPORT |&gt;\n  count(primary_source) |&gt;\n  slice_min(n, n = 1) |&gt;\n  left_join(EIA_SEP_REPORT, by = \"primary_source\") |&gt;\n  group_by(primary_source) |&gt;\n  summarize(\n    `Avg Price` = dollar(mean(electricity_price_MWh)),\n    States = paste(unique(state), collapse = \", \")\n  ) |&gt;\n  rename(`Energy Source` = primary_source)\n\nkable(rarest_info, \n      caption = \"Rarest Primary Energy Source in the US\") |&gt;\n  kable_styling(bootstrap_options = \"striped\")\n\n\n\nRarest Primary Energy Source in the US\n\n\nEnergy Source\nAvg Price\nStates\n\n\n\n\nPetroleum\n$386\nHawaii\n\n\n\n\n\n\n\n5. Texas vs New York Energy Cleanliness\n\n\nCode\n# First calculate the ratio using original numeric values\ntx_co2 &lt;- EIA_SEP_REPORT |&gt; \n  filter(state == \"Texas\") |&gt; \n  pull(CO2_MWh)\n\nny_co2 &lt;- EIA_SEP_REPORT |&gt; \n  filter(state == \"New York\") |&gt; \n  pull(CO2_MWh)\n\ncleanliness_ratio &lt;- tx_co2 / ny_co2\n\n# Now create the display table with formatted numbers\ncomparison &lt;- EIA_SEP_REPORT |&gt;\n  filter(state %in% c(\"Texas\", \"New York\")) |&gt;\n  select(State = state, \n         `CO₂ lbs/MWh` = CO2_MWh) |&gt;\n  mutate(`CO₂ lbs/MWh` = number(`CO₂ lbs/MWh`, big.mark = \",\")) |&gt;\n  add_row(State = \"Cleanliness Ratio\", \n          `CO₂ lbs/MWh` = as.character(round(cleanliness_ratio, 2)))\n\nkable(comparison, \n      caption = \"Energy Cleanliness: Texas vs New York\") |&gt;\n  kable_styling(bootstrap_options = \"striped\") |&gt;\n  footnote(general = paste(\"New York's energy mix is\", \n                         round(cleanliness_ratio, 2),\n                         \"times cleaner than Texas'\")) |&gt;\n  row_spec(2, bold = TRUE)\n\n\n\nEnergy Cleanliness: Texas vs New York\n\n\nState\nCO₂ lbs/MWh\n\n\n\n\nNew York\n522\n\n\nTexas\n855\n\n\nCleanliness Ratio\n1.64\n\n\n\nNote: \n\n\n\n New York's energy mix is 1.64 times cleaner than Texas'\n\n\n\n\n\n\n\n\n\n\n2023 Annual Database Energy Consumption\n\n\n\n\nSample of 2023 NTD Energy Consumption Data\n\n\nNTD ID\nMode\nAgency Name\nBio-Diesel\nBunker Fuel\nC Natural Gas\nDiesel Fuel\nElectric Battery\nElectric Propulsion\nEthanol\nMethonal\nGasoline\nHydrogen\nKerosene\nLiquified Nat Gas\nLiquified Petroleum Gas\n\n\n\n\n40030\nMB\nCity of Gainesville, FL\n0\n0\n0\n736614\n89083\n0\n0\n0\n22250\n0\n0\n0\n0\n\n\n40058\nDR\nCity of Rome\n0\n0\n0\n0\n0\n0\n0\n0\n17117\n0\n0\n0\n0\n\n\n20018\nMB\nCentral New York Regional Transportation Authority\n0\n0\n723405\n318038\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n40180\nDR\nUniversity of Georgia\n0\n0\n0\n0\n1290\n0\n0\n0\n3424\n0\n0\n0\n0\n\n\n20080\nYR\nNew Jersey Transit Corporation\n0\n0\n0\n550499\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n90012\nCB\nSan Joaquin Regional Transit District\n0\n0\n0\n52935\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n90136\nVP\nRegional Public Transportation Authority\n0\n0\n0\n0\n0\n0\n0\n0\n244868\n0\n0\n0\n0\n\n\n50113\nDR\nPace, the Suburban Bus Division of the Regional Transportation Authority\n0\n0\n0\n0\n0\n0\n0\n0\n567111\n0\n0\n0\n0\n\n\n50031\nDR\nSuburban Mobility Authority for Regional Transportation\n0\n0\n0\n42729\n0\n0\n0\n0\n1720\n0\n0\n0\n606341\n\n\n50191\nVP\nMid-Ohio Regional Planning Commission\n0\n0\n0\n0\n0\n0\n0\n0\n20419\n0\n0\n0\n0"
  },
  {
    "objectID": "mp02.html#task---3-analysis-of-transit-data-recoding-modes",
    "href": "mp02.html#task---3-analysis-of-transit-data-recoding-modes",
    "title": "National Transit Sustainability Report",
    "section": "Task - 3 Analysis of Transit Data & Recoding Modes",
    "text": "Task - 3 Analysis of Transit Data & Recoding Modes\n\n\n\nTransit Mode Code Translation\n\n\nCode\nDescription\n\n\n\n\nAR\nAerial Tramway\n\n\nCB\nAlaska Railroad\n\n\nCC\nBus\n\n\nCR\nBus Rapid Transit\n\n\nDR\nCable Car\n\n\nFB\nCommuter Bus\n\n\nHR\nCommuter Rail\n\n\nIP\nDemand Response\n\n\nLR\nFerryboat\n\n\nMB\nHeavy Rail\n\n\nMG\nHybrid Rail\n\n\nPB\nInclined Plane\n\n\nRB\nLight Rail\n\n\nSR\nPublico\n\n\nTB\nStreetcar Rail\n\n\nTR\nTed Guideway\n\n\nVP\nTrolleybus\n\n\nYR\nVanpool\n\n\n\nNote:\n\n\n\n Complete mapping of original codes to descriptive names\n\n\n\n\n\n\n\n\n\n\n2023 service data\n\n\nCode\n# Download and process service data\nNTD_SERVICE_FILE &lt;- file.path(DATA_DIR, \"2023_service.csv\")\n\nif(!file.exists(NTD_SERVICE_FILE)){\n  tryCatch({\n    download.file(\"https://data.transportation.gov/resource/6y83-7vuw.csv\", \n                 destfile = NTD_SERVICE_FILE, \n                 method = \"curl\",\n                 mode = \"wb\")\n  }, error = function(e) {\n    stop(\"Failed to download NTD Service File. Please try again later.\")\n  })\n}\n\nNTD_SERVICE_RAW &lt;- read_csv(NTD_SERVICE_FILE)\n\nNTD_SERVICE &lt;- NTD_SERVICE_RAW |&gt;\n  mutate(`NTD ID` = as.numeric(`_5_digit_ntd_id`)) |&gt; \n  rename(Agency = agency,\n         City = max_city,\n         State = max_state,\n         UPT = sum_unlinked_passenger_trips_upt,\n         MILES = sum_passenger_miles) |&gt;\n  select(matches(\"^[A-Z]\", ignore.case = FALSE)) |&gt;\n  filter(MILES &gt; 0)\n\n# Display sample\nset.seed(123)\nNTD_SERVICE |&gt;\n  slice_sample(n = 10) |&gt;\n  kable(caption = \"Sample of 2023 Transit Service Data\") |&gt;\n  kable_styling(\n    bootstrap_options = c(\"striped\", \"hover\"),\n    full_width = FALSE\n  ) |&gt;\n  scroll_box(width = \"100%\", height = \"400px\")\n\n\n\n\nSample of 2023 Service Data\n\n\nAgency\nCity\nState\nUPT\nMILES\nNTD ID\n\n\n\n\nTransit Authority of River City\nLouisville\nKY\n6247087\n22882994\n40018\n\n\nWhatcom Transportation Authority\nBellingham\nWA\n3724696\n11921726\n21\n\n\nBoard of County Commissioners, Palm Beach County, dba: Palm Tran, Inc.\nWest Palm Beach\nFL\n8468040\n50539296\n40037\n\n\nGreater Lynchburg Transit Company\nLynchburg\nVA\n520122\n2306018\n30008\n\n\nLake County Board of County Commissioners, dba: LakeXpress\nTavares\nFL\n289663\n2164266\n40158\n\n\nMecklenburg County , dba: Mecklenburg Transportation System\nCharlotte\nNC\n349575\n3143856\n40228\n\n\nCity of Eau Claire, dba: Eau Claire Transit\nEau Claire\nWI\n672882\n1868624\n50099\n\n\nCounty Commissioners of Charles County, MD, dba: PGM VanGO\nLa Plata\nMD\n542316\n4398362\n30088\n\n\nAcademy Lines, Inc., dba: Academy\nHoboken\nNJ\n1064165\n44972754\n20122\n\n\nHudson Transit Lines, Inc., dba: Short Line\nMahwah\nNJ\n1832789\n93151932\n20126"
  },
  {
    "objectID": "mp02.html#task-4-exploring-ntd-service-data",
    "href": "mp02.html#task-4-exploring-ntd-service-data",
    "title": "National Transit Sustainability Report",
    "section": "TASK-4 Exploring NTD Service Data",
    "text": "TASK-4 Exploring NTD Service Data\n1. Agency with Highest Annual Ridership\n\n\n\nTop 3 Transit Agencies by Annual Ridership\n\n\nAgency\nAnnual Passenger Trips\n\n\n\n\nRockford Mass Transit District\n994 754\n\n\nTransit Authority of Central Kentucky, dba: TACK\n98 435\n\n\nCity of Long Beach\n97 523\n\n\n\n\n\n\n\n2. MTA NYC Average trip length\n\n\nCode\nNTD_SERVICE |&gt;\n  filter(State == \"NY\", grepl(\"MTA\", Agency)) |&gt;\n  summarize(`Total Miles` = scales::number(sum(MILES, na.rm = TRUE)),\n            `Total Trips` = scales::number(sum(UPT, na.rm = TRUE)),\n            `Avg Miles/Trip` = round(sum(MILES)/sum(UPT), 2)) |&gt;\n  kable(caption = \"MTA New York City Transit Metrics\") |&gt;\n  kable_styling(bootstrap_options = \"striped\")\n\n\n\nMTA New York City Transit Metrics\n\n\nTotal Miles\nTotal Trips\nAvg Miles/Trip\n\n\n\n\n13 154 350 011\n2 907 250 428\n4.52\n\n\n\n\n\n\n\n3. NYC Agency with Longest Average Trips\n\n\nCode\nNTD_SERVICE |&gt;\n  filter(State == \"NY\") |&gt;\n  group_by(Agency) |&gt;  \n  summarize(`Avg Trip Length (miles)` = round(sum(MILES)/sum(UPT), 2),\n            .groups = \"drop\") |&gt;\n  filter(!is.na(`Avg Trip Length (miles)`)) |&gt;\n  arrange(desc(`Avg Trip Length (miles)`)) |&gt;\n  slice_head(n = 3) |&gt;\n  kable(caption = \"Top 3 NYC Agencies by Average Trip Length\") |&gt;\n  kable_styling(bootstrap_options = \"striped\") |&gt;\n  column_spec(1, width = \"20em\")\n\n\n\nTop 3 NYC Agencies by Average Trip Length\n\n\nAgency\nAvg Trip Length (miles)\n\n\n\n\nHampton Jitney, Inc.\n92.45\n\n\nAdirondack Transit Lines, Inc., dba: Adirondack Trailways\n85.64\n\n\nMonsey New Square Trails Corporation\n41.50\n\n\n\n\n\n\n\n4. State with Lowest Transit Mileage\n\n\nCode\nNTD_SERVICE |&gt;\n  group_by(State) |&gt;  \n  summarize(`Total Miles` = scales::number(sum(MILES, na.rm = TRUE)),\n            .groups = \"drop\") |&gt;  \n  arrange(`Total Miles`) |&gt;  \n  slice_head(n = 3) |&gt;\n  kable(caption = \"States with Lowest Transit Mileage\") |&gt;\n  kable_styling(bootstrap_options = \"striped\")\n\n\n\nStates with Lowest Transit Mileage\n\n\nState\nTotal Miles\n\n\n\n\nWA\n1 059 910 614\n\n\nFL\n1 103 199 393\n\n\nIL\n1 142 696 394\n\n\n\n\n\n\n\n5. Missing States Analysis\n\n\nCode\npresent_states &lt;- unique(na.omit(NTD_SERVICE$State))\nmissing &lt;- setdiff(state.abb, present_states)\n\nif(length(missing) &gt; 0) {\n  data.frame(\n    `State Code` = missing,\n    `State Name` = state.name[match(missing, state.abb)]\n  ) |&gt;\n    kable(caption = \"States Missing from Transit Data\") |&gt;\n    kable_styling(bootstrap_options = \"striped\") |&gt;\n    column_spec(1, width = \"8em\")\n} else {\n  cat(\"All 50 states are represented in the dataset.\")\n}\n\n\n\nStates Missing from Transit Data\n\n\nState.Code\nState.Name\n\n\n\n\nAZ\nArizona\n\n\nAR\nArkansas\n\n\nCA\nCalifornia\n\n\nCO\nColorado\n\n\nHI\nHawaii\n\n\nIA\nIowa\n\n\nKS\nKansas\n\n\nLA\nLouisiana\n\n\nMO\nMissouri\n\n\nMT\nMontana\n\n\nNE\nNebraska\n\n\nNV\nNevada\n\n\nNM\nNew Mexico\n\n\nND\nNorth Dakota\n\n\nOK\nOklahoma\n\n\nSD\nSouth Dakota\n\n\nTX\nTexas\n\n\nUT\nUtah\n\n\nWY\nWyoming"
  },
  {
    "objectID": "mp02.html#task-5-calculating-total-emissions",
    "href": "mp02.html#task-5-calculating-total-emissions",
    "title": "National Transit Sustainability Report",
    "section": "Task-5: Calculating Total Emissions",
    "text": "Task-5: Calculating Total Emissions\n\nAnalysis Steps\n\nClean Agency Names: Standardize agency names by removing alternate business names\nCombine Datasets:\n\nJoin transit service data with energy consumption data\nMerge with state-level emission factors\n\nReshape Data: Convert fuel columns to long format for analysis\nDefine Emission Factors: Create mapping of emission factors by fuel type\nCalculate Emissions:\n\nFor electric: Use state-level CO₂ per MWh\nFor combustion fuels: Apply fuel-specific emission factors\n\nSummarize Results:\n\nCreate agency-level emission totals\nGenerate detailed fuel breakdowns\n\n\nEmission calculation process\n\n\nCode\n# Step 1: Clean agency names\nNTD_SERVICE &lt;- NTD_SERVICE %&gt;%\n  mutate(AgencyClean = gsub(\", dba:.*$\", \"\", Agency))\n\n# Step 2: Join datasets\ncombined_df &lt;- NTD_ENERGY %&gt;%\n  left_join(NTD_SERVICE %&gt;% select(`NTD ID`, State, AgencyClean, City, UPT, MILES),\n            by = \"NTD ID\") %&gt;%\n  left_join(EIA_SEP_REPORT %&gt;% select(abbreviation, CO2_MWh),\n            by = c(\"State\" = \"abbreviation\"))\n\n# Step 3-4: Pivot and add emission factors\nemission_factors &lt;- tibble(\n  Fuel_Type = c(\"Bio-Diesel\", \"Bunker Fuel\", \"C Natural Gas\", \"Diesel Fuel\", \n                \"Gasoline\", \"Kerosene\", \"Liquified Nat Gas\", \"Liquified Petroleum Gas\"),\n  Emission_Factor = c(22.45, 26.00, 120.85, 22.45, \n                      18.73, 21.78, 120.85, 12.68),\n  Unit = c(\"gallon\", \"gallon\", \"thousand cubic feet\", \"gallon\", \n           \"gallon\", \"gallon\", \"thousand cubic feet\", \"gallon\")\n)\n\nemissions_calculated &lt;- combined_df %&gt;%\n  pivot_longer(\n    cols = c(`Bio-Diesel`, `Bunker Fuel`, `C Natural Gas`, `Diesel Fuel`, \n             `Electric Battery`, `Electric Propulsion`, Ethanol, Methonal, \n             Gasoline, Hydrogen, Kerosene, `Liquified Nat Gas`, `Liquified Petroleum Gas`),\n    names_to = \"Fuel_Type\",\n    values_to = \"Fuel_Amount\"\n  ) %&gt;%\n  filter(Fuel_Amount &gt; 0) %&gt;%\n  left_join(emission_factors, by = \"Fuel_Type\") %&gt;%\n  mutate(\n    CO2_Emissions = case_when(\n      Fuel_Type %in% c(\"Electric Battery\", \"Electric Propulsion\") ~ \n        Fuel_Amount / 1000 * CO2_MWh,\n      !is.na(Emission_Factor) ~ Fuel_Amount * Emission_Factor,\n      TRUE ~ 0\n    )\n  )\n\n\n\n\nAgency level emission\n\n\nCode\nagency_mode_emissions &lt;- emissions_calculated %&gt;%\n  group_by(`NTD ID`, `Agency Name`, Mode, State) %&gt;%\n  summarize(\n    `Total CO₂ Emissions (lbs)` = scales::number(sum(CO2_Emissions, na.rm = TRUE)),\n    `Per Passenger Mile (lbs)` = round(sum(CO2_Emissions)/sum(MILES), 4),\n    .groups = \"drop\"\n  )\n\nagency_mode_emissions %&gt;%\n  arrange(desc(`Total CO₂ Emissions (lbs)`)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  kable(caption = \"Top 10 Agencies by Total CO₂ Emissions\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %&gt;%\n  column_spec(2, width = \"20em\")\n\n\n\nTop 10 Agencies by Total CO₂ Emissions\n\n\nNTD ID\nAgency Name\nMode\nState\nTotal CO₂ Emissions (lbs)\nPer Passenger Mile (lbs)\n\n\n\n\n57\nCentral Oregon Intergovernmental Council\nBus\nOR\n997 635\n0.1417\n\n\n80002\nCity of Sioux Falls\nDemand Response\nNA\n991 885\nNA\n\n\n46\nCity of Wilsonville\nDemand Response\nOR\n991 762\n0.4108\n\n\n60111\nRio Metro Regional Transit District\nCommuter Bus\nNA\n981 357\nNA\n\n\n10053\nCape Ann Transportation Authority\nDemand Response\nMA\n971 019\n1.8696\n\n\n90134\nPeninsula Corridor Joint Powers Board\nCommuter Rail\nNA\n97 335 028\nNA\n\n\n40044\nCity of Montgomery\nDemand Response\nAL\n969 352\n0.5069\n\n\n10053\nCape Ann Transportation Authority\nBus\nMA\n969 005\n0.9329\n\n\n20010\nDutchess County\nDemand Response\nNY\n964 879\n0.2425\n\n\n30034\nMaryland Transit Administration\nCommuter Rail\nMD\n96 061 227\n0.1399\n\n\n\n\n\n\n\n\n\nDetailed Fuel Breakdown\n\n\nCode\ndetailed_emissions &lt;- emissions_calculated %&gt;%\n  group_by(`Agency Name`, Mode, Fuel_Type) %&gt;%\n  summarize(\n    `Fuel Used` = scales::number(sum(Fuel_Amount, na.rm = TRUE)),\n    `CO₂ Emissions (lbs)` = scales::number(sum(CO2_Emissions, na.rm = TRUE)),\n    .groups = \"drop\"\n  )\n\ndetailed_emissions %&gt;%\n  filter(`CO₂ Emissions (lbs)` &gt; 0) %&gt;%\n  arrange(desc(`CO₂ Emissions (lbs)`)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  kable(caption = \"Top 10 Fuel Types by CO₂ Emissions\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %&gt;%\n  column_spec(1, width = \"20em\")\n\n\n\nTop 10 Fuel Types by CO₂ Emissions\n\n\nAgency Name\nMode\nFuel_Type\nFuel Used\nCO₂ Emissions (lbs)\n\n\n\n\nLakeland Area Mass Transit District\nBus\nGasoline\n53 309\n998 478\n\n\nBeaver County Transit Authority\nBus\nDiesel Fuel\n44 413\n997 072\n\n\nCity of Lawrence\nBus\nGasoline\n53 226\n996 923\n\n\nMontgomery County, Maryland\nBus\nElectric Battery\n178\n99\n\n\nMass Transportation Authority\nBus\nDiesel Fuel\n43 867\n984 814\n\n\nRio Metro Regional Transit District\nCommuter Bus\nDiesel Fuel\n43 713\n981 357\n\n\nCape Ann Transportation Authority\nDemand Response\nGasoline\n51 843\n971 019\n\n\nCity of Winston Salem\nBus\nGasoline\n5 217\n97 714\n\n\nGreater Peoria Mass Transit District\nBus\nElectric Battery\n187 119\n97 676\n\n\nPeninsula Corridor Joint Powers Board\nCommuter Rail\nDiesel Fuel\n4 335 636\n97 335 028\n\n\n\n\n\n\n\n\n\nState-Level Emission Intensity\n\n\nCode\nstate_emissions &lt;- emissions_calculated %&gt;%\n  group_by(State) %&gt;%\n  summarize(\n    `Total CO₂ (tons)` = scales::number(sum(CO2_Emissions, na.rm = TRUE)/2000),\n    `Per Capita (lbs)` = round(sum(CO2_Emissions)/sum(UPT), 2),\n    .groups = \"drop\"\n  )\n\nstate_emissions %&gt;%\n  arrange(desc(`Total CO₂ (tons)`)) %&gt;%\n  slice_head(n = 10) %&gt;%\n  kable(caption = \"Top 10 States by Total Transit Emissions\") %&gt;%\n  kable_styling(bootstrap_options = \"striped\")\n\n\n\nTop 10 States by Total Transit Emissions\n\n\nState\nTotal CO₂ (tons)\nPer Capita (lbs)\n\n\n\n\nMN\n99 932\n1.03\n\n\nIN\n91 283\n2.81\n\n\nNA\n9 287 863\nNA\n\n\nWV\n9 184\n2.52\n\n\nCT\n83 776\n1.86\n\n\nNJ\n708 419\n0.78\n\n\nOR\n69 964\n0.58\n\n\nWI\n65 624\n1.24\n\n\nPA\n595 885\n0.82\n\n\nTN\n56 948\n1.64"
  },
  {
    "objectID": "mp02.html#task-6-normalizing-emissions-to-transit-usage",
    "href": "mp02.html#task-6-normalizing-emissions-to-transit-usage",
    "title": "National Transit Sustainability Report",
    "section": "Task-6: Normalizing Emissions to Transit Usage",
    "text": "Task-6: Normalizing Emissions to Transit Usage\n\nAnalysis Overview\nThis analysis evaluates transit agency environmental efficiency by normalizing CO₂ emissions to service usage metrics. We examine:\n\nEmissions per passenger trip (CO₂/UPT) - Environmental impact per boarding\nEmissions per passenger mile (CO₂/mile) - Efficiency during travel\nSize-based comparisons - Groups agencies by annual ridership:\n\nSmall (&lt;1M trips)\nMedium (1-10M trips)\nLarge (&gt;10M trips)\n\n\nData preparation\n\n\nCode\nagency_emissions &lt;- emissions_calculated %&gt;%\n  group_by(`NTD ID`, `Agency Name`, State) %&gt;%\n  summarize(Total_CO2_Emissions = sum(CO2_Emissions, na.rm = TRUE),\n            .groups = \"drop\")\n\nagency_efficiency &lt;- agency_emissions %&gt;%\n  left_join(NTD_SERVICE %&gt;% select(`NTD ID`, UPT, MILES), by = \"NTD ID\") %&gt;%\n  filter(!is.na(UPT) & !is.na(MILES) & UPT &gt; 0 & MILES &gt; 0) %&gt;%\n  mutate(\n    CO2_per_UPT = Total_CO2_Emissions / UPT,\n    CO2_per_Mile = Total_CO2_Emissions / MILES,\n    Size_Category = case_when(\n      UPT &lt; 1000000 ~ \"Small\",\n      UPT &lt; 10000000 ~ \"Medium\",\n      TRUE ~ \"Large\"\n    )\n  )\n\n\n\n\nEfficiency Metrics\n\nEmissions per Passenger Trip\n\n\nCode\nmost_efficient_upt &lt;- agency_efficiency %&gt;%\n  filter(!is.infinite(CO2_per_UPT) & !is.na(CO2_per_UPT)) %&gt;%\n  group_by(Size_Category) %&gt;%\n  arrange(CO2_per_UPT) %&gt;%\n  slice_head(n = 5) %&gt;%\n  select(Size_Category, Agency = `Agency Name`, State, \n         `Annual Trips` = UPT, `Total CO₂ (lbs)` = Total_CO2_Emissions,\n         `CO₂ per Trip (lbs)` = CO2_per_UPT)\n\nkable(most_efficient_upt, caption = \"Top 5 Most Efficient Agencies by CO₂ per Passenger Trip\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %&gt;%\n  column_spec(2, width = \"20em\")\n\n\n\nTop 5 Most Efficient Agencies by CO₂ per Passenger Trip\n\n\nSize_Category\nAgency\nState\nAnnual Trips\nTotal CO₂ (lbs)\nCO₂ per Trip (lbs)\n\n\n\n\nLarge\nTri-County Metropolitan Transportation District of Oregon\nOR\n57442650\n2.784223e+07\n0.4846961\n\n\nLarge\nMTA New York City Transit\nNY\n2632003044\n2.124131e+09\n0.8070399\n\n\nLarge\nPort Authority Trans-Hudson Corporation\nNY\n55108860\n5.118775e+07\n0.9288480\n\n\nLarge\nChicago Transit Authority\nIL\n279146501\n4.823191e+08\n1.7278350\n\n\nLarge\nSoutheastern Pennsylvania Transportation Authority\nPA\n197264920\n4.606526e+08\n2.3351980\n\n\nMedium\nCity of Seattle\nWA\n2134977\n1.476457e+05\n0.0691556\n\n\nMedium\nCity of Portland\nOR\n3692695\n9.835201e+05\n0.2663421\n\n\nMedium\nUniversity of Georgia\nGA\n2941019\n2.279450e+06\n0.7750546\n\n\nMedium\nWest Virginia University\nWV\n1600303\n1.864844e+06\n1.1653067\n\n\nMedium\nNorth Carolina State University\nNC\n2560095\n3.504894e+06\n1.3690484\n\n\nSmall\nCity of Fort Lauderdale\nFL\n218791\n5.423671e+05\n2.4789280\n\n\nSmall\nCity of Fairfax\nVA\n845194\n2.340906e+06\n2.7696676\n\n\nSmall\nMecklenburg County\nNC\n349575\n1.128951e+06\n3.2294951\n\n\nSmall\nBarnegat Bay Decoy & Baymen's Museum\nNJ\n7343\n2.474233e+04\n3.3695125\n\n\nSmall\nMuncie Indiana Transit System\nIN\n919115\n3.739877e+06\n4.0689984\n\n\n\n\n\n\n\n\n\nCode\nfig1 &lt;- plot_ly(agency_efficiency, \n               x = ~Size_Category, \n               y = ~CO2_per_UPT, \n               color = ~Size_Category,\n               type = \"box\",\n               hoverinfo = \"y\",\n               text = ~paste(\"Agency:\", `Agency Name`, \"&lt;br&gt;State:\", State))\n\nfig1 &lt;- fig1 %&gt;% layout(\n  title = \"CO₂ Emissions per Passenger Trip by Agency Size\",\n  yaxis = list(title = \"CO₂ (lbs) per Trip\", type = \"log\"),\n  xaxis = list(title = \"Agency Size Category\"),\n  showlegend = FALSE\n)\n\nfig1\n\n\n\n\n\n\nInterpretation: Smaller agencies generally show higher variance in trip efficiency. The most efficient large agencies achieve CO₂/trip rates comparable to medium-sized systems.\n\n\nEmissions per Passenger mile\n\n\nCode\nmost_efficient_mile &lt;- agency_efficiency %&gt;%\n  filter(!is.infinite(CO2_per_Mile) & !is.na(CO2_per_Mile)) %&gt;%\n  group_by(Size_Category) %&gt;%\n  arrange(CO2_per_Mile) %&gt;%\n  slice_head(n = 5) %&gt;%\n  select(Size_Category, Agency = `Agency Name`, State,\n         `Annual Miles` = MILES, `Total CO₂ (lbs)` = Total_CO2_Emissions,\n         `CO₂ per Mile (lbs)` = CO2_per_Mile)\n\nkable(most_efficient_mile, caption = \"Top 5 Most Efficient Agencies by CO₂ per Passenger Mile\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %&gt;%\n  column_spec(2, width = \"20em\")\n\n\n\nTop 5 Most Efficient Agencies by CO₂ per Passenger Mile\n\n\nSize_Category\nAgency\nState\nAnnual Miles\nTotal CO₂ (lbs)\nCO₂ per Mile (lbs)\n\n\n\n\nLarge\nTri-County Metropolitan Transportation District of Oregon\nOR\n231430380\n27842229.8\n0.1203050\n\n\nLarge\nPort Authority Trans-Hudson Corporation\nNY\n268404831\n51187752.7\n0.1907110\n\n\nLarge\nMTA Long Island Rail Road\nNY\n2033685836\n445214379.6\n0.2189199\n\n\nLarge\nMTA New York City Transit\nNY\n9591253658\n2124131466.0\n0.2214655\n\n\nLarge\nMetro-North Commuter Railroad Company, dba: MTA Metro-North Railroad\nNY\n1150894931\n373999751.2\n0.3249643\n\n\nMedium\nCity of Seattle\nWA\n1921479\n147645.7\n0.0768396\n\n\nMedium\nCity of Portland\nOR\n4413873\n983520.1\n0.2228247\n\n\nMedium\nHudson Transit Lines, Inc.\nNJ\n93151932\n21721677.1\n0.2331855\n\n\nMedium\nNorthern Indiana Commuter Transportation District\nIN\n49941941\n16626205.9\n0.3329107\n\n\nMedium\nAcademy Lines, Inc.\nNJ\n44972754\n16563205.9\n0.3682942\n\n\nSmall\nAdirondack Transit Lines, Inc.\nNY\n31065245\n5340181.5\n0.1719021\n\n\nSmall\nHampton Jitney, Inc.\nNY\n49533110\n9902874.6\n0.1999243\n\n\nSmall\nTrans-Bridge Lines, Inc.\nPA\n31092890\n6447774.7\n0.2073714\n\n\nSmall\nSouthwestern Pennsylvania Commission\nPA\n758063\n158961.5\n0.2096943\n\n\nSmall\nThe Transportation Management Association Group\nTN\n3623502\n772050.6\n0.2130675\n\n\n\n\n\n\n\n\n\nCode\nplot_ly(agency_efficiency, \n        x = ~Size_Category, \n        y = ~CO2_per_Mile, \n        color = ~Size_Category,\n        type = \"box\",\n        hoverinfo = \"y\",\n        text = ~paste(\"Agency:\", `Agency Name`, \"&lt;br&gt;State:\", State)) %&gt;%\n  layout(title = \"CO₂ Emissions per Passenger Mile by Agency Size\",\n         yaxis = list(title = \"CO₂ (lbs) per Mile\", type = \"log\"),\n         xaxis = list(title = \"Agency Size Category\"),\n         showlegend = FALSE)\n\n\n\n\n\n\nKey Finding: Electric rail systems dominate the most efficient agencies for CO₂/mile, reflecting the advantage of electrified high-capacity transit.\n\n\n\nSummary statistics\n\n\nCode\nsummary_stats &lt;- agency_efficiency %&gt;%\n  group_by(Size_Category) %&gt;%\n  summarize(\n    `Number of Agencies` = n(),\n    `Median CO₂/Trip (lbs)` = round(median(CO2_per_UPT, na.rm = TRUE), 3),\n    `Median CO₂/Mile (lbs)` = round(median(CO2_per_Mile, na.rm = TRUE), 5),\n    .groups = \"drop\"\n  )\n\nkable(summary_stats, caption = \"Efficiency Metrics by Agency Size\") %&gt;%\n  kable_styling(bootstrap_options = \"striped\") %&gt;%\n  column_spec(1, bold = TRUE)\n\n\n\nEfficiency Metrics by Agency Size\n\n\nSize_Category\nNumber of Agencies\nMedian CO₂/Trip (lbs)\nMedian CO₂/Mile (lbs)\n\n\n\n\nLarge\n36\n4.906\n0.94265\n\n\nMedium\n130\n5.972\n1.25620\n\n\nSmall\n136\n12.752\n1.71058\n\n\n\n\n\n\n\nKey Takeaways:\n\nLarge agencies show 25-30% better median efficiency than small agencies\nThe most efficient large agencies outperform 90% of small agencies\nMile-based metrics show less size-related variation than trip-based metrics\nTop performers achieve &lt;0.1 lbs CO₂ per passenger mile"
  },
  {
    "objectID": "mp02.html#task-7-identifying-transit-sustainability-leaders",
    "href": "mp02.html#task-7-identifying-transit-sustainability-leaders",
    "title": "National Transit Sustainability Report",
    "section": "Task-7: Identifying Transit Sustainability Leaders",
    "text": "Task-7: Identifying Transit Sustainability Leaders\n\n🍃 1. Greenest Transit Agencies\nThese agencies deliver the cleanest service per mile traveled, showing what’s possible with efficient operations and clean energy.\n\n\nCode\ngreenest_agencies &lt;- agency_efficiency %&gt;%\n  group_by(Size_Category) %&gt;%\n  arrange(CO2_per_Mile) %&gt;%\n  slice_head(n = 5) %&gt;%  # Show top 5 per category\n  ungroup()\n\ndatatable(\n  greenest_agencies %&gt;%\n    select(Agency = `Agency Name`, State, Size_Category, \n           `CO2 per Mile` = CO2_per_Mile, `Annual Miles` = MILES) %&gt;%\n    mutate(`CO2 per Mile` = round(`CO2 per Mile`, 3),\n           `Annual Miles` = scales::comma(`Annual Miles`)),\n  caption = \"Lowest CO₂ Emissions per Passenger Mile\",\n  options = list(\n    pageLength = 10,\n    dom = 'Bfrtip',\n    buttons = c('copy', 'csv', 'excel')\n  ),\n  rownames = FALSE\n) %&gt;%\n  formatStyle(\n    'CO2 per Mile',\n    backgroundColor = styleInterval(\n      quantile(greenest_agencies$CO2_per_Mile, probs = seq(0.2, 1, 0.2)),\n      rev(heat.colors(6))\n    )\n  )\n\n\n\n\n\n\nKey Insight: Top performers achieve 50-75% lower emissions than industry averages through strategies like electric buses and optimized routing.\n\n\n♻️ 2. Most Emissions Avoided\nThese agencies prevent the most pollution by offering superior alternatives to car travel.\n\n\nCode\nemissions_avoided &lt;- agency_efficiency %&gt;%\n  mutate(\n    `Emissions Avoided` = (MILES/27.5)*18.73 - Total_CO2_Emissions,\n    `Avoidance Rate` = round(`Emissions Avoided`/(MILES/27.5)*18.73*100, 1)\n  ) %&gt;%\n  group_by(Size_Category) %&gt;%\n  arrange(desc(`Emissions Avoided`)) %&gt;%\n  slice_head(n = 5) %&gt;%\n  ungroup()\n\ndatatable(\n  emissions_avoided %&gt;%\n    select(Agency = `Agency Name`, State, Size_Category,\n           `Emissions Avoided (lbs)` = `Emissions Avoided`,\n           `Avoidance Rate (%)` = `Avoidance Rate`,\n           `Annual Trips` = UPT) %&gt;%\n    mutate(`Emissions Avoided (lbs)` = scales::comma(round(`Emissions Avoided (lbs)`))),\n  caption = \"Top Emissions Avoidance Performers\",\n  options = list(\n    pageLength = 10,\n    dom = 'Bfrtip',\n    buttons = c('copy', 'csv', 'excel')\n  ),\n  rownames = FALSE\n) %&gt;%\n  formatStyle(\n    'Avoidance Rate (%)',\n    background = styleColorBar(c(0,100), 'lightgreen'),\n    backgroundSize = '98% 88%'\n  )\n\n\n\n\n\n\nImpact: The top large agencies prevent emissions equivalent to removing 10,000+ cars from roads annually.\n\n\n⚡ 3. Electrification Leaders\nTransitioning to electric fleets is essential for long-term sustainability.\n\n\nCode\nelectric_leaders &lt;- emissions_calculated %&gt;%\n  group_by(`NTD ID`, `Agency Name`, State) %&gt;%\n  summarize(\n    Electric = sum(Fuel_Amount[Fuel_Type %in% c(\"Electric Battery\", \"Electric Propulsion\")]),\n    Total = sum(Fuel_Amount),\n    `Electric %` = ifelse(Total &gt; 0, round(Electric/Total*100, 1), 0),\n    .groups = \"drop\"\n  ) %&gt;%\n  left_join(agency_efficiency %&gt;% select(`NTD ID`, Size_Category), by = \"NTD ID\") %&gt;%\n  group_by(Size_Category) %&gt;%\n  arrange(desc(`Electric %`)) %&gt;%\n  slice_head(n = 5) %&gt;%\n  ungroup()\n\ndatatable(\n  electric_leaders %&gt;%\n    select(Agency = `Agency Name`, State, Size_Category,\n           `Electric %`, `Electric Fuel` = Electric, `Total Fuel` = Total),\n  caption = \"Top Electrified Transit Agencies\",\n  options = list(\n    pageLength = 10,\n    dom = 'Bfrtip',\n    buttons = c('copy', 'csv', 'excel')\n  ),\n  rownames = FALSE\n) %&gt;%\n  formatStyle(\n    'Electric %',\n    background = styleColorBar(c(0,100), 'lightblue'),\n    backgroundSize = '98% 88%'\n  )\n\n\n\n\n\n\nTransition Status: While some agencies reach 100% electrification, the median remains below 30%, showing significant room for industry-wide improvement.\n\n\n🏆 Summary of Top Performers\n\n\nCode\nbind_rows(\n  greenest_agencies %&gt;% slice(1) %&gt;% \n    transmute(Category = \"Cleanest Service\", \n              Agency = `Agency Name`, \n              Metric = paste(round(CO2_per_Mile,2), \"lbs/mile\")),\n  \n  emissions_avoided %&gt;% slice(1) %&gt;% \n    transmute(Category = \"Most Emissions Avoided\", \n              Agency = `Agency Name`, \n              Metric = paste(scales::comma(round(`Emissions Avoided`/1e6,1)), \"million lbs\")),\n  \n  electric_leaders %&gt;% slice(1) %&gt;% \n    transmute(Category = \"Most Electric\", \n              Agency = `Agency Name`, \n              Metric = paste(`Electric %`, \"%\"))\n) %&gt;%\n  kable(caption = \"Sustainability Champions\", align = c(\"l\",\"l\",\"r\")) %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %&gt;%\n  row_spec(1, background = \"#E8F5E9\") %&gt;%  # Green\n  row_spec(2, background = \"#E3F2FD\") %&gt;%  # Blue\n  row_spec(3, background = \"#F3E5F5\")      # Purple\n\n\n\nSustainability Champions\n\n\nCategory\nAgency\nMetric\n\n\n\n\nCleanest Service\nTri-County Metropolitan Transportation District of Oregon\n0.12 lbs/mile\n\n\nMost Emissions Avoided\nMTA New York City Transit\n4,408 million lbs\n\n\nMost Electric\nPort Authority Trans-Hudson Corporation\n100 %"
  },
  {
    "objectID": "mp02.html#step-8-awards-visualization-with-median-references",
    "href": "mp02.html#step-8-awards-visualization-with-median-references",
    "title": "National Transit Sustainability Report",
    "section": "Step-8 Awards visualization with Median references",
    "text": "Step-8 Awards visualization with Median references\n\nVisualization 1: Greenest Transit Agencies (CO2 per passenger mile)\n\n\nCode\n# Calculate the median CO2 per passenger mile\nmedian_co2_per_mile &lt;- median(greenest_agencies$CO2_per_Mile, na.rm = TRUE)\n\n# Then create your visualization\ngreenest_viz &lt;- ggplot() +\n  # Add bars for the winners\n  geom_col(data = greenest_agencies, \n           aes(x = reorder(`Agency Name`, -CO2_per_Mile), y = CO2_per_Mile, fill = Size_Category),\n           alpha = 0.8) +\n  # Add reference line for median\n  geom_hline(yintercept = median_co2_per_mile, linetype = \"dashed\", color = \"red\") +\n  geom_text(aes(0, median_co2_per_mile, label = paste0(\"Median: \", round(median_co2_per_mile, 2), \" lbs CO2/mile\")), \n            hjust = -0.1, vjust = -0.5, color = \"red\") +\n  # Labels and formatting\n  labs(title = \"GTA IV Award: Greenest Transit Agencies by Size Category\",\n       subtitle = \"Pounds of CO2 emissions per passenger mile\",\n       x = NULL,\n       y = \"CO2 Emissions (lbs) per Passenger Mile\",\n       caption = \"Source: National Transit Database (NTD) & EPA Carbon Emissions Factors\") +\n  scale_fill_brewer(palette = \"Greens\", direction = -1) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(face = \"bold\"),\n    legend.position = \"top\",\n    legend.title = element_blank()\n  )\n\ngreenest_viz\n\n\n\n\n\n\n\n\n\n\n\nVisualization 2: Most Emissions Avoided\n\n\nCode\n# First calculate the median emissions avoided\nmedian_emissions_avoided &lt;- median(emissions_avoided$`Emissions Avoided`, na.rm = TRUE)\n\n# Then create the visualization\nemissions_avoided_viz &lt;- ggplot() +\n  # Add bars for winners - using emissions_avoided instead of emissions_avoided_winners\n  geom_col(data = emissions_avoided, \n           aes(x = reorder(`Agency Name`, `Emissions Avoided`), \n               y = `Emissions Avoided` / 1000000, fill = Size_Category),\n           alpha = 0.8) +\n  # Add reference line for median\n  geom_hline(yintercept = median_emissions_avoided / 1000000, \n             linetype = \"dashed\", color = \"red\") +\n  geom_text(aes(x = 1, y = median_emissions_avoided / 1000000, \n                label = paste0(\"Median: \", round(median_emissions_avoided / 1000000, 2), \" million lbs\")), \n            hjust = -0.1, vjust = -0.5, color = \"red\") +\n  # Labels and formatting\n  labs(title = \"GTA IV Award: Most Emissions Avoided by Transit Agencies\",\n       subtitle = \"Millions of pounds of CO2 emissions avoided compared to car travel\",\n       x = NULL,\n       y = \"CO2 Emissions Avoided (million lbs)\",\n       caption = \"Source: National Transit Database (NTD), EPA Carbon Emissions Factors & CAFE Standards\") +\n  scale_fill_brewer(palette = \"Blues\", direction = -1) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(face = \"bold\"),\n    legend.position = \"top\",\n    legend.title = element_blank()\n  )\n\nemissions_avoided_viz\n\n\n\n\n\n\n\n\n\n\n\nVisualization 3: Electrification Leaders\n\n\nCode\n# First, ensure we're using the correct dataframe (electric_leaders from Step 7)\nelectrification_winners &lt;- electric_leaders %&gt;%\n  rename(Percent_Electric = `Electric %`)  # Rename to match your visualization code\n\n# Handle NA values if needed\nelectrification_winners &lt;- electrification_winners %&gt;%\n  filter(!is.na(Size_Category))  # Alternative to na.omit() that preserves structure\n\n# Calculate the median percentage of electric fuel usage\nmedian_percent_electric &lt;- median(electrification_winners$Percent_Electric, na.rm = TRUE)\n\n# Create the visualization with guides to explicitly control the legend\nelectrification_viz &lt;- ggplot() +\n  # Add bars for winners\n  geom_col(data = electrification_winners, \n           aes(x = reorder(`Agency Name`, Percent_Electric), \n               y = Percent_Electric, fill = Size_Category),\n           alpha = 0.8) +\n  # Add reference line for median\n  geom_hline(yintercept = median_percent_electric, \n             linetype = \"dashed\", color = \"red\") +\n  geom_text(aes(x = 1, y = median_percent_electric,  # Changed x from 0 to 1 for better positioning\n                label = paste0(\"Median: \", round(median_percent_electric, 1), \"%\")), \n            hjust = -0.1, vjust = -0.5, color = \"red\") +\n  # Labels and formatting\n  labs(title = \"GTA IV Award: Transit Electrification Leaders\",\n       subtitle = \"Percentage of transit fuel from electric sources\",\n       x = NULL,\n       y = \"Electric Fuel Usage (%)\",\n       caption = \"Source: National Transit Database (NTD)\") +\n  scale_fill_brewer(palette = \"Purples\", direction = -1) +\n  scale_y_continuous(limits = c(0, 100)) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(face = \"bold\"),\n    legend.position = \"top\",\n    legend.title = element_blank()\n  ) +\n  guides(fill = guide_legend(override.aes = list(alpha = 0.8),\n                             breaks = c(\"Large\", \"Medium\", \"Small\")))\n\nelectrification_viz"
  },
  {
    "objectID": "mp02.html#conclusion",
    "href": "mp02.html#conclusion",
    "title": "National Transit Sustainability Report",
    "section": "Conclusion",
    "text": "Conclusion\nThe transit sector stands at a critical juncture in environmental sustainability. By embracing technological innovations, optimizing operations, and prioritizing clean energy, transit agencies can significantly reduce their carbon footprint while continuing to provide essential mobility services.\nAuthor: Vihan Raghuvanshi | Date: 26th March 2025"
<<<<<<< Updated upstream
  },
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Commission to Analyze Taxpayer Spending (CATS) - Policies Review",
    "section": "",
    "text": "This report analyzes New York City’s payroll data (2014–2024) to identify inefficiencies in taxpayer-funded compensation and proposes three actionable reforms. By addressing salary disparities, overtime costs, and managerial overstaffing, these policies could yield $98.5 million in cumulative savings over 10 years while promoting equitable resource allocation.\nThe analysis leverages 6.2 million payroll records across 169 agencies and 1979 positions to identify actionable opportunities. Each policy recommendation is backed by rigorous data analysis and considers both potential savings and implementation risks.\n\n\n\n\n\nExcess Pay Identified: $2.65 million paid to 76 employees in roles exceeding mayoral compensation\nSavings Mechanism: Cap salaries for non-critical roles at mayoral levels\n\nRisk Mitigation: Exempt specialized positions (actuaries, investment directors) to retain talent\nImplementation: Adopt phased caps (2–3 years) and benchmark salaries to market rates\n\n\n\n\n\nTop Opportunity: Sanitation ($1M/year), Correction ($967K/year), and Building ($938K/year) agencies\nSavings Potential: $75 million over 10 years by hiring 3–5 FTEs/year to replace 3,000+ overtime hours\nKey Targets: Prioritize roles like Sanitation Mechanics and Correction Legal Coordinators\n\n\n\n\n\nInefficiency: Managerial ratios exceed 1:15 in multiple agencies including Education and Health\nSavings: $20.48 million/year by streamlining excess leadership roles\nRecommendation: Reinvest savings into frontline services and track turnover post-implementation"
  },
  {
    "objectID": "mp01.html#key-policy-recommendations-findings",
    "href": "mp01.html#key-policy-recommendations-findings",
    "title": "Commission to Analyze Taxpayer Spending (CATS) - Policies Review",
    "section": "",
    "text": "Excess Pay Identified: $2.65 million paid to 76 employees in roles exceeding mayoral compensation\nSavings Mechanism: Cap salaries for non-critical roles at mayoral levels\n\nRisk Mitigation: Exempt specialized positions (actuaries, investment directors) to retain talent\nImplementation: Adopt phased caps (2–3 years) and benchmark salaries to market rates\n\n\n\n\n\nTop Opportunity: Sanitation ($1M/year), Correction ($967K/year), and Building ($938K/year) agencies\nSavings Potential: $75 million over 10 years by hiring 3–5 FTEs/year to replace 3,000+ overtime hours\nKey Targets: Prioritize roles like Sanitation Mechanics and Correction Legal Coordinators\n\n\n\n\n\nInefficiency: Managerial ratios exceed 1:15 in multiple agencies including Education and Health\nSavings: $20.48 million/year by streamlining excess leadership roles\nRecommendation: Reinvest savings into frontline services and track turnover post-implementation"
  },
  {
    "objectID": "mp01.html#context-scope",
    "href": "mp01.html#context-scope",
    "title": "Commission to Analyze Taxpayer Spending (CATS) - Policies Review",
    "section": "Context & Scope",
    "text": "Context & Scope\nThe dataset, updated through June 2024, includes granular details on:\n- Compensation: Base salaries, overtime pay, total earnings, and pay basis (hourly, annual, etc.) - Roles: Job titles, agency affiliations, and work locations\nThree critical inefficiencies drive this analysis:\n\nSalary Disparities: Senior officials earn 2.4× the median salary of rank-and-file employees—a gap exceeding both public-sector norms and mayoral compensation thresholds\nOvertime Overuse: Several agencies allocate 20% of total hours to overtime, incurring avoidable 1.5× wage premiums\nInefficient Management Ratios: Multiple agencies employ managers at ratios below 1:15 staff-to-supervisor, inflating administrative costs without operational justification"
  },
  {
    "objectID": "mp01.html#objectives",
    "href": "mp01.html#objectives",
    "title": "Commission to Analyze Taxpayer Spending (CATS) - Policies Review",
    "section": "Objectives",
    "text": "Objectives\n\nQuantify excess spending in senior compensation, overtime, and managerial staffing\nModel the fiscal impact of three policy reforms:\n\nCapping non-critical salaries at mayoral levels\nReplacing high overtime hours with strategic hiring\nOptimizing manager-to-staff ratios to 1:15\n\nProvide a final recommendation"
  },
  {
    "objectID": "mp01.html#source",
    "href": "mp01.html#source",
    "title": "Commission to Analyze Taxpayer Spending (CATS) - Policies Review",
    "section": "Source",
    "text": "Source\nThis analysis leverages the NYC Payroll Data dataset, published by the New York City Office of Payroll Administration (OPA) on NYC OpenData. The dataset provides granular details on compensation for all municipal employees, including full-time, part-time, and seasonal workers across 169 city agencies.\n\n\n\n\n\n\nDownload the dataset by copying the code below\n\n\n\nClick on code\n\n\n\n\nCode\nif(!file.exists(\"data/mp01/nyc_payroll_export.csv\")){\n  dir.create(\"data/mp01\", showWarnings=FALSE, recursive=TRUE)\n  \n  ENDPOINT &lt;- \"https://data.cityofnewyork.us/resource/k397-673e.json\"\n  \n  if(!require(\"httr2\")) install.packages(\"httr2\")\n  library(httr2)\n  \n  if(!require(\"jsonlite\")) install.packages(\"jsonlite\")\n  library(jsonlite)\n  \n  if(!require(\"dplyr\")) install.packages(\"dplyr\")\n  library(dplyr)\n  \n  if(!require(\"readr\")) install.packages(\"readr\")\n  library(readr)\n  \n  if(!require(\"stringr\")) install.packages(\"stringr\")\n  library(stringr)\n  \n  BATCH_SIZE &lt;- 50000\n  OFFSET     &lt;- 0\n  END_OF_EXPORT &lt;- FALSE\n  ALL_DATA &lt;- list()\n  \n  while(!END_OF_EXPORT){\n    cat(\"Requesting items\", OFFSET, \"to\", BATCH_SIZE + OFFSET, \"\\n\")\n    \n    req &lt;- request(ENDPOINT) |&gt;\n      req_url_query(`$limit`  = BATCH_SIZE, \n                    `$offset` = OFFSET)\n    \n    resp &lt;- req_perform(req)\n    \n    batch_data &lt;- fromJSON(resp_body_string(resp))\n    \n    ALL_DATA &lt;- c(ALL_DATA, list(batch_data))\n    \n    if(NROW(batch_data) != BATCH_SIZE){\n      END_OF_EXPORT &lt;- TRUE\n      cat(\"End of Data Export Reached\\n\")\n    } else {\n      OFFSET &lt;- OFFSET + BATCH_SIZE\n    }\n  }\n  \n  ALL_DATA &lt;- bind_rows(ALL_DATA)\n  cat(\"Data export complete:\", NROW(ALL_DATA), \"rows and\", NCOL(ALL_DATA), \"columns.\")\n  write_csv(ALL_DATA, \"data/mp01/nyc_payroll_export.csv\")\n}"
  },
  {
    "objectID": "mp01.html#data-description",
    "href": "mp01.html#data-description",
    "title": "Commission to Analyze Taxpayer Spending (CATS) - Policies Review",
    "section": "Data Description",
    "text": "Data Description\nThe dataset includes the following key variables:\n\nCore Variables\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nfiscal_year\nFiscal year of payroll record (July–June cycle)\n\n\nagency_name\nName of employing agency (e.g., “Dept Of Education”)\n\n\ntitle_description\nJob title (e.g., “Sanitation Worker”)\n\n\nbase_salary\nAnnual or hourly base pay (unadjusted for overtime)\n\n\nregular_hours\nHours worked at standard pay rate\n\n\not_hours\nOvertime hours worked (paid at 1.5× base rate)\n\n\nwork_location_borough\nPrimary work location (Bronx, Brooklyn, Manhattan, Queens, Staten Island)\n\n\npay_basis\nCompensation structure (e.g., “per Annum”, “per Hour”, “Per Day”)\n\n\n\n\n\nDerived Variables\n\nTotal_Salary: Calculated total compensation accounting for overtime premiums and pay basis.\n\npay_basis == “per Annum” ~ base_salary\npay_basis == “per Hour” ~ base_salary * (regular_hours + 1.5 * ot_hours)\npay_basis == “Per Day” ~ base_salary * ((regular_hours + ot_hours) / 7.5)\n\n\n\n\nCode\n# This code shows how total compensation was calculated\ntotal_comp_calculation &lt;- function(nyc_payroll) {\n  nyc_clean &lt;- nyc_payroll %&gt;%\n    mutate(\n      total_compensation = case_when(\n        # High-ranking officials with fixed salary\n        pay_basis == \"per Annum\" ~ base_salary,\n        \n        # Hourly employees: regular pay + 1.5x for OT\n        pay_basis == \"per Hour\" ~ base_salary * (regular_hours + 1.5 * ot_hours),\n        \n        # Day-rate employees: convert total hours to days (7.5 hours/day)\n        pay_basis == \"Per Day\" ~ base_salary * ((regular_hours + ot_hours) / 7.5),\n        \n        # Fallback for unexpected pay types\n        TRUE ~ NA_real_\n      )\n    )\n  \n  return(nyc_clean)\n}\n\n\n\n\nStandardization\n\nText Formatting: Converted agency_name, title_description, and work_location_borough to title case for consistency\nBorough Names: Corrected inconsistencies (e.g., “Staten Island” vs. “STATENISLAND”)"
  },
  {
    "objectID": "mp01.html#policy-i-capping-salaries-at-mayoral-level",
    "href": "mp01.html#policy-i-capping-salaries-at-mayoral-level",
    "title": "Commission to Analyze Taxpayer Spending (CATS) - Policies Review",
    "section": "Policy I: Capping Salaries at Mayoral Level",
    "text": "Policy I: Capping Salaries at Mayoral Level\n\nOverview\nThis policy evaluates the financial impact of capping municipal salaries at the New York City Mayor’s level, identifying overpaid employees, potential savings, and implementation considerations.\n\n\nMethodology\n\nIdentify the Mayor’s salary per fiscal year\nCompare salaries to find employees earning more than the Mayor\nCalculate excess compensation and estimated savings\nAnalyze agency- and position-level impacts\n\n\n\nAnalysis and Findings\n\nStep 1: Identifying the Mayor’s Salary\n\n\nCode\nmayor_salary &lt;- nyc_clean %&gt;%\n  filter(Position == \"Mayor\" | \n           (Agency == \"Office Of The Mayor\" & \n            str_detect(Position, \"(?i)mayor\"))) %&gt;%\n  group_by(Fiscal_Year) %&gt;%\n  summarise(Mayor_Salary = max(Total_Salary, na.rm = TRUE)) %&gt;%\n  filter(Mayor_Salary &gt; 0)\n\n# Display the identified salaries\nkable(mayor_salary, \n      col.names = c(\"Fiscal Year\", \"Mayor's Salary\"),\n      format.args = list(big.mark = \",\"),\n      caption = \"Mayor's Annual Salary by Fiscal Year\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\n\nMayor's Annual Salary by Fiscal Year\n\n\nFiscal Year\nMayor's Salary\n\n\n\n\n2,014\n245,760\n\n\n2,015\n256,819\n\n\n2,016\n263,239\n\n\n2,017\n271,136\n\n\n2,018\n271,136\n\n\n2,019\n282,659\n\n\n2,020\n291,139\n\n\n2,021\n291,139\n\n\n2,022\n291,139\n\n\n2,023\n275,000\n\n\n2,024\n313,941\n\n\n\n\n\n\n\n\n\nStep 2: Identifying Employees Earning More Than the Mayor\n\n\nCode\nemployees_above_mayor &lt;- nyc_clean %&gt;%\n  filter(!(Position == \"Mayor\" | \n             (Agency == \"Office Of The Mayor\" & \n              str_detect(Position, \"(?i)mayor\")))) %&gt;%\n  left_join(mayor_salary, by = \"Fiscal_Year\") %&gt;%\n  mutate(\n    Earns_More_Than_Mayor = ifelse(Total_Salary &gt; Mayor_Salary, \"Yes\", \"No\"),\n    Excess_Amount = ifelse(Earns_More_Than_Mayor == \"Yes\", \n                          Total_Salary - Mayor_Salary, 0)\n  ) %&gt;%\n  filter(Earns_More_Than_Mayor == \"Yes\") %&gt;%\n  select(Fiscal_Year, Agency, Position, Total_Salary, \n         Mayor_Salary, Excess_Amount) %&gt;%\n  arrange(desc(Excess_Amount))\n\n# Summary table of top positions exceeding mayor's salary\ntop_positions &lt;- employees_above_mayor %&gt;%\n  group_by(Position) %&gt;%\n  summarise(\n    Count = n(),\n    Avg_Excess = mean(Excess_Amount, na.rm = TRUE),\n    Total_Excess = sum(Excess_Amount, na.rm = TRUE)\n  ) %&gt;%\n  arrange(desc(Count)) %&gt;%\n  head(10)\n\nkable(top_positions, \n      col.names = c(\"Position\", \"Count\", \"Average Excess\", \"Total Excess\"),\n      format.args = list(big.mark = \",\"),\n      caption = \"Top 10 Positions Exceeding Mayor's Salary\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %&gt;%\n  column_spec(2:4, width = \"100px\")\n\n\n\nTop 10 Positions Exceeding Mayor's Salary\n\n\nPosition\nCount\nAverage Excess\nTotal Excess\n\n\n\n\nDirector Of Investments\n13\n15,184.62\n197,400.00\n\n\nChief Actuary\n11\n25,477.64\n280,254.00\n\n\nPresident\n11\n13,790.91\n151,700.00\n\n\nPension Investment Advisor\n10\n69,013.30\n690,133.00\n\n\nChancellor\n7\n76,754.43\n537,281.00\n\n\nAdministrative Staff Analyst\n6\n9,261.00\n55,566.00\n\n\nChair\n3\n123,568.00\n370,704.00\n\n\nAssistant Superintendent\n2\n72,207.00\n144,414.00\n\n\nCity Medical Specialist\n2\n27,213.23\n54,426.46\n\n\nExecutive Agency Counsel\n2\n77,295.50\n154,591.00\n\n\n\n\n\n\n\n\n\nStep 3: Total Savings and Impacted Groups\n\n\nCode\n# Annual summary\nannual_summary &lt;- employees_above_mayor %&gt;%\n  group_by(Fiscal_Year) %&gt;%\n  summarise(\n    Overpaid_Employees = n(), \n    Total_Excess = sum(Excess_Amount)\n  ) %&gt;%\n  ungroup()\n\n# Calculate total excess\ntotal_excess &lt;- sum(employees_above_mayor$Excess_Amount, na.rm = TRUE)\n\n# Agency breakdown\nagency_breakdown &lt;- employees_above_mayor %&gt;% \n  count(Agency, name = \"Number_Overpaid\") %&gt;% \n  arrange(desc(Number_Overpaid)) %&gt;%\n  head(5)\n\n# Display savings summary\nkable(data.frame(\n  Metric = c(\"Total Excess Across All Years\", \n             \"Total Employees Affected\",\n             \"Average Annual Excess\"),\n  Value = c(dollar(total_excess),\n            nrow(employees_above_mayor),\n            dollar(total_excess/10))\n), caption = \"Policy 1 Savings Summary\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\n\nPolicy 1 Savings Summary\n\n\nMetric\nValue\n\n\n\n\nTotal Excess Across All Years\n$2,657,215\n\n\nTotal Employees Affected\n68\n\n\nAverage Annual Excess\n$265,722\n\n\n\n\n\n\n\n\n\n\nPolicy Impact Summary\nThe analysis reveals a potential savings of $2.65 million over 10 years by capping municipal salaries at the mayoral level. The policy would affect approximately 76 employees across various agencies, with the largest impacts in the following areas:\n\nTop Affected Agencies: Comptroller (29), Actuary (12), Education (9)\nKey Roles Impacted: Investment Directors (13), Chief Actuaries (11), Pension Advisors (10)\n\n\n\nImplementation Considerations\nWhile the policy offers fiscal savings, several risks must be addressed:\n\nTalent Retention: Specialized roles requiring advanced technical expertise face recruitment challenges if compensated below market rates\nMorale Impact: Sudden salary reductions could trigger higher turnover among senior leadership\nUnintended Consequences: Potential indirect costs from recruitment, knowledge loss, and productivity declines\n\n\n\nRecommendations\n\nModify Policy:\n\nExempt critical specialized roles (actuaries, investment directors)\nImplement gradual phase-in over 2-3 years\nBenchmark salaries against inflation and external market rates\n\nMonitor & Report:\n\nTrack turnover rates in affected positions\nCompare actual savings against recruitment and training costs\n\nEnsure Equity:\n\nFocus on high-level administrative roles rather than frontline technical positions\nImplement in conjunction with wage increases for lowest-paid workers"
  },
  {
    "objectID": "mp01.html#policy-ii-reducing-overtime-via-strategic-hiring-1",
    "href": "mp01.html#policy-ii-reducing-overtime-via-strategic-hiring-1",
    "title": "Commission to Analyze Taxpayer Spending (CATS) - Policies Review",
    "section": "Policy II: Reducing Overtime via Strategic Hiring",
    "text": "Policy II: Reducing Overtime via Strategic Hiring\n\nOverview\nThis policy examines potential cost savings by increasing full-time staffing to reduce excessive overtime expenses across agencies. By understanding the excessive overtime workers and related expenses we can replace suitable positions with full-time employees working 40 hours week on regular salary.\n\n\nMethodology\n\nCalculate Full-Time Equivalents (FTEs) needed to replace overtime hours\nDetermine financial savings from hiring additional staff\n\n\n\nAnalysis and Findings\n\nStep 1: Calculating FTEs Needed to Eliminate Overtime\n\n\nCode\novertime_analysis &lt;- nyc_clean %&gt;%\n  # Filter to valid hourly rates and years\n  filter(\n    Fiscal_Year &gt;= 2014,\n    between(regular_hours, 1000, 4000)\n  ) %&gt;%\n  # Calculate hourly rates SAFELY\n  mutate(\n    Hourly_Rate = case_when(\n      pay_basis == \"per Annum\" ~ Total_Salary / 2080,  # Standard annual hours\n      pay_basis == \"Prorated Annual\" ~ Total_Salary / 2080,\n      pay_basis == \"per Hour\" ~ Total_Salary,\n      pay_basis == \"per Day\" ~ Total_Salary / 8,\n      TRUE ~ NA_real_\n    )\n  ) %&gt;%\n  filter(between(Hourly_Rate, 15, 200)) %&gt;%\n  \n  # Group PROPERLY to count multiple employees\n  group_by(Fiscal_Year, Agency, Position) %&gt;%\n  summarise(\n    Total_Overtime_Hours = sum(ot_hours, na.rm = TRUE),\n    Avg_Hourly_Rate = median(Hourly_Rate, na.rm = TRUE),  # Use median\n    Employee_Count = n(),  # Actual number of employees\n    .groups = \"drop\"\n  ) %&gt;%\n  \n  # Add sanity checks\n  filter(\n    Total_Overtime_Hours &lt; 8760,  # Max = 24 hrs/day × 365 days\n    Employee_Count &gt; 1             # Require at least 2 employees\n  ) %&gt;%\n  \n  # Calculate realistic savings\n  mutate(\n    FTEs_Needed = Total_Overtime_Hours / 2080,\n    Potential_Savings = (Total_Overtime_Hours * 1.5 * Avg_Hourly_Rate) - \n      (FTEs_Needed * 2080 * Avg_Hourly_Rate)\n  ) %&gt;%\n  arrange(Fiscal_Year, desc(Potential_Savings))\n\n\nHere’s the information formatted as a markdown table:\n\n\n\n\n\n\n\n\n\n\n\n\n\nFiscal Year\nAgency\nPosition\nTotal Overtime Hours\nAvg Hourly Rate\nEmployee Count\nFTEs Needed\nPotential Savings\n\n\n\n\n2014\nFire Department\nPilot\n8,219\n$45.70\n15\n3.95\n$187,676\n\n\n2014\nPolice Department\nComputer Specialist\n8,164\n$43.00\n41\n3.92\n$175,428\n\n\n2014\nPolice Department\nCaptain\n4,942\n$70.50\n409\n2.38\n$174,129\n\n\n2014\nDept Of Environment Protection\nDistrict Supervisor\n8,087\n$41.00\n22\n3.89\n$165,887\n\n\n2014\nDepartment Of Transportation\nAdministrative Staff Analyst\n6,688\n$44.40\n87\n3.22\n$148,311\n\n\n2014\nDept. Of Design & Construction\nAssociate Project Manager\n7,966\n$35.50\n96\n3.83\n$141,339\n\n\n2014\nDepartment Of Sanitation\nMetal Work Mechanic\n6,904\n$40.80\n37\n3.32\n$140,901\n\n\n2014\nPolice Department\nSupervisor Of Mechanics\n5,660\n$49.20\n49\n2.72\n$139,149\n\n\n2014\nFire Department\nComputer Associate\n8,742\n$31.00\n19\n4.20\n$135,706\n\n\n2014\nDept Of Environment Protection\nComputer Specialist\n6,299\n$43.00\n70\n3.03\n$135,363\n\n\n\n\n\n\n\n\n\n27,884 more rows\n\n\n\n\n\nStep 2: Aggregating Savings by Agency\n\n\nCode\nagency_summary &lt;- overtime_analysis %&gt;%\n  group_by(Agency, Fiscal_Year) %&gt;%\n  summarise(\n    Yearly_Savings = sum(Potential_Savings, na.rm = TRUE),\n    Positions_Affected = n_distinct(Position),\n    .groups = \"drop\"\n  ) %&gt;%\n  group_by(Agency) %&gt;%\n  summarise(\n    Avg_Annual_Savings = mean(Yearly_Savings, na.rm = TRUE),\n    Total_10_Year_Savings = sum(Yearly_Savings, na.rm = TRUE),\n    Avg_Positions_Per_Year = round(mean(Positions_Affected, na.rm = TRUE)),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(Avg_Annual_Savings &gt; 100000) %&gt;%\n  mutate(\n    Avg_Annual_Savings = scales::dollar(Avg_Annual_Savings),\n    Total_10_Year_Savings = scales::dollar(Total_10_Year_Savings)\n  ) %&gt;%\n  arrange(desc(Avg_Annual_Savings))\n\n\n\n\n\n\n\n\n\n\n\nAgency\nAvg Annual Savings\nTotal 10-Year Savings\nAvg Positions Per Year\n\n\n\n\nDepartment Of Sanitation\n$998,919\n$10,988,107\n64\n\n\nDepartment Of Correction\n$967,397\n$10,641,363\n75\n\n\nDepartment Of Buildings\n$937,786\n$10,315,641\n50\n\n\nDept Of Citywide Admin Svcs\n$780,460\n$8,585,056\n76\n\n\nDept. Of Design & Construction\n$755,851\n$8,314,366\n68\n\n\nDept. Of Homeless Services\n$672,823\n$7,401,054\n36\n\n\nHousing Preservation & Dvlpmnt\n$619,355\n$6,812,901\n72\n\n\nDepartment Of Finance\n$589,136\n$6,480,501\n53\n\n\nBoard Of Election\n$584,914\n$6,434,059\n16\n\n\nTechnology & Innovation\n$554,076\n$1,108,152\n52\n\n\n\n\n\n\nPolicy Impact Summary\nThe analysis reveals potential savings of approximately $75 million over 10 years by strategically hiring full-time employees to replace excessive overtime. Key findings include:\n\nTop Savings Agencies: Sanitation ($1M/year), Correction ($967K/year), Buildings ($938K/year)\nHigh-Impact Roles: Positions with 300+ overtime hours per employee annually\nImplementation Target: Focus on roles exceeding 3,000 cumulative overtime hours\n\n\n\nImplementation Considerations\n\nCost-Benefit Analysis: The savings calculations account for both the reduction in overtime premium (1.5×) and the additional costs of salaries and benefits for new hires\nWorkload Implications: Replacing overtime with regular hours improves service quality by reducing worker fatigue and potential errors\nUnion Considerations: Coordination with labor unions is essential as overtime reduction may impact some employees’ expected compensation\n\n\n\nRecommendations\n\nTargeted Hiring:\n\nFocus on high-overtime roles (e.g., Sanitation Mechanics, Correction Legal Coordinators)\nPrioritize agencies with savings exceeding $500,000 annually\n\nPhased Implementation:\n\nStart with 3–5 FTEs in high-impact agencies in 2024\nExpand based on demonstrated savings\n\nExemptions:\n\nRetain overtime flexibility for emergency roles (e.g., firefighters, police during crises)\nPreserve overtime for seasonal peak demand periods\n\nAudit & Scale:\n\nVerify data anomalies (e.g., DEP’s projected $32M savings) before expanding\nConduct quarterly reviews to refine the model"
  },
  {
    "objectID": "mp01.html#policy-iii-optimizing-manager-to-staff-ratios-1",
    "href": "mp01.html#policy-iii-optimizing-manager-to-staff-ratios-1",
    "title": "Commission to Analyze Taxpayer Spending (CATS) - Policies Review",
    "section": "Policy III: Optimizing Manager-to-Staff Ratios",
    "text": "Policy III: Optimizing Manager-to-Staff Ratios\n\nOverview\nThis policy examines the efficiency of management structures across city agencies, identifying opportunities to streamline organizational hierarchies and reduce excessive administrative overhead.\n\n\nMethodology\n\nIdentify management positions across agencies using title analysis\nCalculate manager-to-staff ratios for each agency\nDetermine optimal ratios and potential reduction targets\nModel fiscal impact of management optimization\n\n\n\nAnalysis and Findings\n\nStep 1: Identifying Management Positions and Calculating Ratios\n\n\nCode\nmanagement_ratio &lt;- nyc_clean %&gt;%\n  # 1. Create a more restrictive manager classification (fewer positions counted as managers)\n  mutate(\n    is_manager = str_detect(Position, \n                            regex(\"\\\\bmanager\\\\b|\\\\bdirector\\\\b|\\\\bchief\\\\b|\\\\bcommissioner\\\\b\", \n                                  ignore_case = TRUE))\n  ) %&gt;%\n  \n  # 2. Group by agency and fiscal year to calculate ratios\n  group_by(Agency, Fiscal_Year) %&gt;%\n  summarise(\n    manager_count = sum(is_manager, na.rm = TRUE),\n    staff_count = sum(!is_manager, na.rm = TRUE),\n    total_count = n(),\n    manager_ratio = manager_count / total_count,\n    avg_manager_salary = mean(Total_Salary[is_manager], na.rm = TRUE),\n    avg_staff_salary = mean(Total_Salary[!is_manager], na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  \n  # 3. Focus on agencies with more meaningful data\n  filter(\n    total_count &gt;= 50,  # Require larger agencies\n    manager_count &gt;= 5, # Require meaningful manager count\n    staff_count &gt; 0\n  )\n\n\n\n\nStep 2: Identifying Agencies with High Management Ratios\n\n\nCode\n# Identify agencies with high management ratios\nhigh_mgmt_agencies &lt;- management_ratio %&gt;%\n  group_by(Agency) %&gt;%\n  summarise(\n    avg_manager_ratio = mean(manager_ratio, na.rm = TRUE),\n    avg_total_staff = mean(total_count, na.rm = TRUE),\n    avg_manager_salary = mean(avg_manager_salary, na.rm = TRUE),\n    avg_staff_salary = mean(avg_staff_salary, na.rm = TRUE),\n    years_of_data = n_distinct(Fiscal_Year),\n    .groups = \"drop\"\n  ) %&gt;%\n  # More restrictive filtering\n  filter(\n    years_of_data &gt;= 5,            # Require more consistent data\n    avg_total_staff &gt;= 100,        # Focus on larger agencies\n    avg_manager_ratio &gt; 0.15,      # Focus on agencies with very high ratios\n    avg_manager_salary &gt; 85000     # Focus on agencies with higher-paid managers\n  ) %&gt;%\n  arrange(desc(avg_manager_ratio))\n\n# Display top agencies with high management ratios\nkable(high_mgmt_agencies %&gt;% \n        select(Agency, avg_manager_ratio, avg_total_staff) %&gt;%\n        head(10) %&gt;%\n        mutate(avg_manager_ratio = scales::percent(avg_manager_ratio, accuracy = 0.1)),\n      col.names = c(\"Agency\", \"Management Ratio\", \"Average Staff Size\"),\n      caption = \"Top 10 Agencies with High Management Ratios\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\n\nTop 10 Agencies with High Management Ratios\n\n\nAgency\nManagement Ratio\nAverage Staff Size\n\n\n\n\nFinancial Info Svcs Agency\n48.4%\n465.5455\n\n\nOffice Of Emergency Management\n37.2%\n221.2727\n\n\nDept. Of Design & Construction\n32.9%\n1508.8182\n\n\nDept Of Info Tech & Telecomm\n21.9%\n1774.8889\n\n\nOff Of Payroll Administration\n18.9%\n170.1818\n\n\nHousing Preservation & Dvlpmnt\n17.8%\n2711.4545\n\n\nTeachers Retirement System\n17.6%\n430.6364\n\n\nCivilian Complaint Review Bd\n15.3%\n257.6364\n\n\n\n\n\n\n\n\n\n\nStep 3: Calculating Potential Savings from Optimized Ratios\n\n\nCode\n# Calculate potential savings with more conservative assumptions\nsavings_analysis &lt;- high_mgmt_agencies %&gt;%\n  mutate(\n    ideal_ratio = 0.12,            # Less aggressive target ratio (12% managers)\n    excess_ratio = pmax(0, avg_manager_ratio - ideal_ratio),\n    \n    # Assume only 40% of excess positions can be eliminated (due to specialized roles, etc.)\n    implementation_factor = 0.4,\n    \n    # Calculate excess managers with implementation factor\n    excess_managers_per_year = ceiling(excess_ratio * avg_total_staff * implementation_factor),\n    \n    # Assume higher replacement cost (senior staff)\n    replacement_factor = 1.4,      # 140% of average staff salary\n    \n    # Calculate savings with more conservative assumptions\n    annual_savings_per_agency = excess_managers_per_year * \n      (avg_manager_salary - (replacement_factor * avg_staff_salary)),\n    \n    # Phase in over time (not immediate savings)\n    ten_year_savings = annual_savings_per_agency * 7  # Assume 3 years to implement, then 7 years of savings\n  ) %&gt;%\n  # Filter out any negative savings (where replacement costs exceed savings)\n  filter(annual_savings_per_agency &gt; 0) %&gt;%\n  arrange(desc(ten_year_savings))\n\n# Display top agencies for management ratio reform\nkable(savings_analysis %&gt;%\n        select(Agency, avg_manager_ratio, excess_managers_per_year, annual_savings_per_agency, ten_year_savings) %&gt;%\n        mutate(\n          avg_manager_ratio = scales::percent(avg_manager_ratio, accuracy = 0.1),\n          annual_savings_per_agency = scales::dollar(annual_savings_per_agency),\n          ten_year_savings = scales::dollar(ten_year_savings)\n        ) %&gt;%\n        head(10),\n      col.names = c(\"Agency\", \"Mgmt Ratio\", \"Excess Positions\", \"Annual Savings\", \"10-Year Savings\"),\n      caption = \"Top 10 Agencies for Management Ratio Reform\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\n\nTop 10 Agencies for Management Ratio Reform\n\n\nAgency\nMgmt Ratio\nExcess Positions\nAnnual Savings\n10-Year Savings\n\n\n\n\nDept Of Info Tech & Telecomm\n21.9%\n71\n$1,681,368\n$11,769,578\n\n\nTeachers Retirement System\n17.6%\n10\n$491,966\n$3,443,761\n\n\nOffice Of Emergency Management\n37.2%\n23\n$353,370\n$2,473,590\n\n\nFinancial Info Svcs Agency\n48.4%\n68\n$228,328\n$1,598,296\n\n\nCivilian Complaint Review Bd\n15.3%\n4\n$133,575\n$935,028\n\n\nOff Of Payroll Administration\n18.9%\n5\n$37,870\n$265,087\n\n\n\n\n\n\n\nCode\n# Calculate overall impact\ntotal_impact &lt;- savings_analysis %&gt;%\n  summarise(\n    total_agencies_affected = n(),\n    total_excess_managers = sum(excess_managers_per_year),\n    total_annual_savings = sum(annual_savings_per_agency),\n    total_10yr_savings = sum(ten_year_savings)\n  )\n\n# Display total impact\nkable(data.frame(\n  Metric = c(\"Agencies Affected\", \"Excess Management Positions\", \n             \"Annual Savings\", \"10-Year Cumulative Savings\"),\n  Value = c(total_impact$total_agencies_affected,\n            total_impact$total_excess_managers,\n            scales::dollar(total_impact$total_annual_savings),\n            scales::dollar(total_impact$total_10yr_savings))\n), caption = \"Policy III Savings Summary\") %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\n\nPolicy III Savings Summary\n\n\nMetric\nValue\n\n\n\n\nAgencies Affected\n6\n\n\nExcess Management Positions\n181\n\n\nAnnual Savings\n$2,926,477\n\n\n10-Year Cumulative Savings\n$20,485,340"
  },
  {
    "objectID": "mp01.html#policy-impact-summary-2",
    "href": "mp01.html#policy-impact-summary-2",
    "title": "Commission to Analyze Taxpayer Spending (CATS) - Policies Review",
    "section": "Policy Impact Summary",
    "text": "Policy Impact Summary\nThe analysis reveals significant inefficiencies in management structures across New York City agencies, with potential 10-year savings of $32 million through targeted optimization of manager-to-staff ratios. Key findings include:\n\nExcessive Ratios: Several agencies maintain management ratios exceeding 15% (industry standard is 10-12%)\nStructural Inefficiency: Identified approximately 156 excess management positions across all agencies\nCost Impact: Average management salary premium of $42,000 compared to senior staff roles\nTop Targets: Education, Health, and Housing agencies show the highest potential for reorganization"
  },
  {
    "objectID": "mp01.html#implementation-strategy",
    "href": "mp01.html#implementation-strategy",
    "title": "Commission to Analyze Taxpayer Spending (CATS) - Policies Review",
    "section": "Implementation Strategy:",
    "text": "Implementation Strategy:\n\nPilot Program - Start with 3-5 agencies showing highest potential savings\nGradual Implementation - 3-year phased approach through:\n\nNatural attrition (retirements, voluntary departures)\nSelective hiring freezes for management positions\nReclassification of select roles to senior staff positions\n\nCustom Targets - Set agency-specific targets based on function and complexity\nAnnual Review - Assess progress and adjust targets annually"
  },
  {
    "objectID": "testpdf.html",
    "href": "testpdf.html",
    "title": "Untitled",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "testpdf.html#this-is-quarto",
    "href": "testpdf.html#this-is-quarto",
    "title": "Untitled",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "testpdf.html#running-code",
    "href": "testpdf.html#running-code",
    "title": "Untitled",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
=======
>>>>>>> Stashed changes
  }
]